<?xml version="1.0" encoding="UTF-8"?>

<root> 
  <Component source="dev.ukanth.ufirewall.broadcast.PackageBroadcast"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void addNotification(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void addNotification(android.content.Context,java.lang.String)&gt;,void addNotification(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void addNotification(android.content.Context,java.lang.String)&gt;"/>  
        <node method="PackageBroadcast addNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="virtualinvoke $r7.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="virtualinvoke $r7.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="virtualinvoke $r7.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="PackageBroadcast addNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.CustomScriptActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;,void resultOk()"/>  
      <source name="dev.ukanth.ufirewall.activity.CustomScriptActivity"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;"/>  
        <node method="CustomScriptActivity resultOk" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CustomScriptActivity resultOk" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS, "/>  
      <sender action="android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS&quot;)"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="PassOutIntent" unit="virtualinvoke $r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.chainfire.libsuperuser.HideOverlaysReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.chainfire.libsuperuser.HideOverlaysReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.chainfire.libsuperuser.HideOverlaysReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.chainfire.libsuperuser.HideOverlaysReceiver"/>  
      <nodes> 
        <node method="&lt;eu.chainfire.libsuperuser.HideOverlaysReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="HideOverlaysReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender extras="Parcelable@-haibison.android.lockpattern.LockPatternActivity.PENDING_INTENT_CANCELLED,"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.app.PendingIntent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;($r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null" extras="Parcelable@-haibison.android.lockpattern.LockPatternActivity.PENDING_INTENT_CANCELLED,"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentCancelled(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;($r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentCancelled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender extras="Parcelable@-haibison.android.lockpattern.LockPatternActivity.PENDING_INTENT_FORGOT_PATTERN,"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.app.PendingIntent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;($r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null" extras="Parcelable@-haibison.android.lockpattern.LockPatternActivity.PENDING_INTENT_FORGOT_PATTERN,"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentForgotPattern(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;($r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentForgotPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;,android.content.Intent build()"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder build" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder build" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder build" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder build" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.StartActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.StartActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.StartActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.StartActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.StartActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="StartActivity onCreate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="StartActivity onCreate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="StartActivity onCreate" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(335544320)"/>  
        <node method="StartActivity onCreate" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.StartActivity: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment$1: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment$1: boolean onPreferenceClick(android.preference.Preference)&gt;,boolean onPreferenceClick(android.preference.Preference)"/>  
      <source name="dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.activity.ProfileActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment$1: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
        <node method="MultiProfilePreferenceFragment$1 onPreferenceClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MultiProfilePreferenceFragment$1 onPreferenceClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Ldev/ukanth/ufirewall/activity/ProfileActivity;&quot;)"/>  
        <node method="MultiProfilePreferenceFragment$1 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Fragment,int,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Fragment,int,android.os.Bundle)&gt;,void startForResult(android.app.Fragment,int,android.os.Bundle), &lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <destinition name="interICC_, "/>  
      <sender data="null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Fragment,int,android.os.Bundle)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;()"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)&gt;($r3, $i0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void registerNetworkObserver()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void registerNetworkObserver()&gt;,void registerNetworkObserver()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void registerNetworkObserver()&gt;"/>  
        <node method="MainActivity registerNetworkObserver" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity registerNetworkObserver" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/>  
        <node method="MainActivity registerNetworkObserver" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void showAbout()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void showAbout()&gt;,void showAbout()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.HelpActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showAbout()&gt;"/>  
        <node method="MainActivity showAbout" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showAbout" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/HelpActivity;&quot;)"/>  
        <node method="MainActivity showAbout" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1200)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setTheme(int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setTheme(int)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setTheme(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setTheme(int)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setTheme" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setTheme" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setTheme" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setTheme" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setTheme" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setTheme" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOld"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOld"/>  
      <destinition name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="ToggleWidgetOld onUpdate" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="ToggleWidgetOld onUpdate" type="SetAttribute" unit="specialinvoke $r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/widget/ToggleWidgetOldActivity;&quot;)"/>  
        <node method="ToggleWidgetOld onUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131296584, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.CustomScriptActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;,void resultOk()"/>  
      <source name="dev.ukanth.ufirewall.activity.CustomScriptActivity"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;"/>  
        <node method="CustomScriptActivity resultOk" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CustomScriptActivity resultOk" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent getIntent()&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent getIntent()&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder getIntent" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder getIntent" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder getIntent" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder getIntent" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.StatusWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;,void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.TOGGLE_REQUEST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;"/>  
        <node method="StatusWidget showWidget" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="StatusWidget showWidget" type="SetAttribute" unit="specialinvoke $r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="StatusWidget showWidget" type="SetAttribute" unit="virtualinvoke $r6.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.TOGGLE_REQUEST&quot;)"/>  
        <node method="StatusWidget showWidget" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131296604, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.CustomScriptActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void access$000(dev.ukanth.ufirewall.activity.CustomScriptActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void access$000(dev.ukanth.ufirewall.activity.CustomScriptActivity)&gt;,&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;,void resultOk()"/>  
      <source name="dev.ukanth.ufirewall.activity.CustomScriptActivity"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void access$000(dev.ukanth.ufirewall.activity.CustomScriptActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;"/>  
        <node method="CustomScriptActivity resultOk" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CustomScriptActivity resultOk" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;,void showInstalledAppDetails(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="com.android.settings.InstalledAppDetails"/>  
      <sender action="android.intent.action.VIEW" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api showInstalledAppDetails" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)&gt;(&quot;com.android.settings&quot;, &quot;com.android.settings.InstalledAppDetails&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;,void showInstalledAppDetails(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="interICC_android.settings.APPLICATION_DETAILS_SETTINGS, "/>  
      <sender action="android.settings.APPLICATION_DETAILS_SETTINGS" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api showInstalledAppDetails" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.APPLICATION_DETAILS_SETTINGS&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r2)"/>  
        <node method="Api showInstalledAppDetails" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;,android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;"/>  
        <node method="LockPatternActivity access$300" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity access$300" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void showRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void showRules()&gt;,void showRules()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showRules()&gt;"/>  
        <node method="MainActivity showRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/RulesActivity;&quot;)"/>  
        <node method="MainActivity showRules" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1202)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.LogService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="LogService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;dev.ukanth.ufirewall.service.LogService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="LogService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder makeRestartTask()&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder makeRestartTask()&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder makeRestartTask()"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null" flags="FLAG_ACTIVITY_CLEAR_TASK FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder makeRestartTask()&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder makeRestartTask" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder makeRestartTask" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder makeRestartTask" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder makeRestartTask" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder makeRestartTask" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(335577088)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ToggleTileService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="ToggleTileService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="ToggleTileService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript()&gt;,void setCustomScript()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.CustomScriptActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript()&gt;"/>  
        <node method="MainActivity setCustomScript" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity setCustomScript" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/CustomScriptActivity;&quot;)"/>  
        <node method="MainActivity setCustomScript" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1201)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender extras="Parcelable@-haibison.android.lockpattern.LockPatternActivity.PENDING_INTENT_OK,"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.app.PendingIntent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;($r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null" extras="Parcelable@-haibison.android.lockpattern.LockPatternActivity.PENDING_INTENT_OK,"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPendingIntentOk(android.app.PendingIntent)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;($r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPendingIntentOk" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ToggleWidget onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ToggleWidget onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.ToggleWidget: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;,void showLog()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;"/>  
        <node method="MainActivity showLog" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showLog" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/LogActivity;&quot;)"/>  
        <node method="MainActivity showLog" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1203)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;,void showLog()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.OldLogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;"/>  
        <node method="MainActivity showLog" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showLog" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/OldLogActivity;&quot;)"/>  
        <node method="MainActivity showLog" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1203)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setResultReceiver(android.os.ResultReceiver)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setResultReceiver(android.os.ResultReceiver)&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setResultReceiver(android.os.ResultReceiver)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setResultReceiver(android.os.ResultReceiver)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setResultReceiver" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setResultReceiver" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setResultReceiver" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setResultReceiver" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setResultReceiver" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setResultReceiver" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.StatusWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;,void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.TOGGLE_REQUEST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;"/>  
        <node method="StatusWidget showWidget" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="StatusWidget showWidget" type="SetAttribute" unit="specialinvoke $r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="StatusWidget showWidget" type="SetAttribute" unit="virtualinvoke $r6.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.TOGGLE_REQUEST&quot;)"/>  
        <node method="StatusWidget showWidget" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131296604, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="MainActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void showPreferences()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void showPreferences()&gt;,void showPreferences()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showPreferences()&gt;"/>  
        <node method="MainActivity showPreferences" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showPreferences" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/preferences/PreferencesActivity;&quot;)"/>  
        <node method="MainActivity showPreferences" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1205)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Fragment,int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Fragment,int)&gt;,void startForResult(android.app.Fragment,int), &lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <destinition name="interICC_, "/>  
      <sender data="null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Fragment,int)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;()"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Fragment: void startActivityForResult(android.content.Intent,int)&gt;($r2, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RulesApplyService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS, "/>  
      <sender action="android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS&quot;)"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="PassOutIntent" unit="virtualinvoke $r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$JCv1AEr0aLNNIkGF-ubzIX_Obqo': void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void lambda$checkAndAskForBatteryOptimization$0(dev.ukanth.ufirewall.MainActivity,com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="MainActivity lambda$checkAndAskForBatteryOptimization$0" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void start()&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void start()&gt;,void start(), &lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <destinition name="interICC_, "/>  
      <sender data="null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void start()&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;()"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;,void showPatternActivity()"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.CREATE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r2, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 9877)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.AppDetailActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;,&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;,void showInstalledAppDetails(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <destinition name="com.android.settings.InstalledAppDetails"/>  
      <sender action="android.intent.action.VIEW" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api showInstalledAppDetails" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)&gt;(&quot;com.android.settings&quot;, &quot;com.android.settings.InstalledAppDetails&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;,&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;,void showInstalledAppDetails(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <destinition name="interICC_android.settings.APPLICATION_DETAILS_SETTINGS, "/>  
      <sender action="android.settings.APPLICATION_DETAILS_SETTINGS" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api showInstalledAppDetails" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.APPLICATION_DETAILS_SETTINGS&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r2)"/>  
        <node method="Api showInstalledAppDetails" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ApplyOnBootService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="ApplyOnBootService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="ApplyOnBootService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Activity,int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Activity,int)&gt;,void startForResult(android.app.Activity,int), &lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <destinition name="interICC_, "/>  
      <sender data="null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Activity,int)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;()"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void start(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void start(android.os.Bundle)&gt;,void start(android.os.Bundle), &lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <destinition name="interICC_, "/>  
      <sender data="null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void start(android.os.Bundle)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;()"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder start" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)&gt;($r3, $r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidget"/>  
      <destinition name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="ToggleWidget onUpdate" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="ToggleWidget onUpdate" type="SetAttribute" unit="specialinvoke $r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/widget/ToggleWidgetActivity;&quot;)"/>  
        <node method="ToggleWidget onUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131296583, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOld"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOld"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetOld onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOld"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOld: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetOld onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Activity,int,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Activity,int,android.os.Bundle)&gt;,void startForResult(android.app.Activity,int,android.os.Bundle), &lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <destinition name="interICC_, "/>  
      <sender data="null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void startForResult(android.app.Activity,int,android.os.Bundle)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: android.content.Intent build()&gt;()"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder startForResult" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)&gt;($r3, $i0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.util.AppListArrayAdapter"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="dev.ukanth.ufirewall.util.AppListArrayAdapter"/>  
      <destinition name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter$1: void onClick(android.view.View)&gt;"/>  
        <node method="AppListArrayAdapter$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AppListArrayAdapter$1 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/activity/AppDetailActivity;&quot;)"/>  
        <node method="AppListArrayAdapter$1 onClick" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="AppListArrayAdapter$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="RootShellService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="RootShellService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;dev.ukanth.ufirewall.service.RootShellService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.FirewallService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.FirewallService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.FirewallService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="FirewallService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.FirewallService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.FirewallService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="FirewallService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.FirewallService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.AppDetailActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.'-$$Lambda$AppDetailActivity$xwaawpIi8wqp1Ehdkamfnb-4D1U': void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.'-$$Lambda$AppDetailActivity$xwaawpIi8wqp1Ehdkamfnb-4D1U': void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;,&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;,void showInstalledAppDetails(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <destinition name="com.android.settings.InstalledAppDetails"/>  
      <sender action="android.intent.action.VIEW" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.'-$$Lambda$AppDetailActivity$xwaawpIi8wqp1Ehdkamfnb-4D1U': void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api showInstalledAppDetails" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)&gt;(&quot;com.android.settings&quot;, &quot;com.android.settings.InstalledAppDetails&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.'-$$Lambda$AppDetailActivity$xwaawpIi8wqp1Ehdkamfnb-4D1U': void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.'-$$Lambda$AppDetailActivity$xwaawpIi8wqp1Ehdkamfnb-4D1U': void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;,&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;,void showInstalledAppDetails(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <destinition name="interICC_android.settings.APPLICATION_DETAILS_SETTINGS, "/>  
      <sender action="android.settings.APPLICATION_DETAILS_SETTINGS" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.'-$$Lambda$AppDetailActivity$xwaawpIi8wqp1Ehdkamfnb-4D1U': void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void lambda$onCreate$1(dev.ukanth.ufirewall.activity.AppDetailActivity,java.lang.String,android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void showInstalledAppDetails(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api showInstalledAppDetails" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.settings.APPLICATION_DETAILS_SETTINGS&quot;)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Api showInstalledAppDetails" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r2)"/>  
        <node method="Api showInstalledAppDetails" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.afollestad.materialdialogs.MaterialDialog"> 
    <intentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.MaterialDialog: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.MaterialDialog: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.afollestad.materialdialogs.MaterialDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.MaterialDialog: void setContentView(int)&gt;"/>  
        <node method="MaterialDialog setContentView" type="setContentView" unit="specialinvoke r0.&lt;com.afollestad.materialdialogs.DialogBase: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.CustomScriptActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void access$000(dev.ukanth.ufirewall.activity.CustomScriptActivity)&gt;,&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;,void resultOk()"/>  
      <source name="dev.ukanth.ufirewall.activity.CustomScriptActivity"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void access$000(dev.ukanth.ufirewall.activity.CustomScriptActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.CustomScriptActivity: void resultOk()&gt;"/>  
        <node method="CustomScriptActivity resultOk" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CustomScriptActivity resultOk" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.CUSTOM_SCRIPT&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.FirewallService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.FirewallService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.FirewallService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="FirewallService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.FirewallService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.FirewallService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="FirewallService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;dev.ukanth.ufirewall.service.FirewallService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootCommand"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$lEbodHOtPLipivAiJO5tJdXS9nU': void onCommandResult(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$startShellInBackground$2(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, -1, $r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, -1, $r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, -1, $r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootCommand"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootCommand"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SecPreferenceFragment onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.UIPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.UIPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.UIPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.UIPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.UIPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyQuick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$Ozf0mxSctBZIWJ-F8J3WAAQop9o': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$2(android.content.Context,java.util.List,boolean,boolean[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp6tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.internal.RootToolsInternalMethods"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerSuperUser(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerSuperUser(android.app.Activity)&gt;,void offerSuperUser(android.app.Activity)"/>  
      <source name="com.stericson.roottools.internal.RootToolsInternalMethods"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerSuperUser(android.app.Activity)&gt;"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.RootTools"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.RootTools: void offerSuperUser(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.RootTools: void offerSuperUser(android.app.Activity)&gt;,&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerSuperUser(android.app.Activity)&gt;,void offerSuperUser(android.app.Activity)"/>  
      <source name="com.stericson.roottools.RootTools"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.RootTools: void offerSuperUser(android.app.Activity)&gt;"/>  
        <node method="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerSuperUser(android.app.Activity)&gt;"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.FireReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$4$1vhzFmXY-_3aP-TGjpXeVN_oJCo': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$4: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$4)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZnK8x8LPcq8_4O4d8VSVKY0--Fk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$deleteFiles$9(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,java.lang.String,android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$dqqR3-KBCB7SfnJyHCHLxg61Aac': boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: boolean lambda$setupInitDir$0(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,android.content.Context,android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.LocaleEdit"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void finish()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void finish()&gt;,void finish()"/>  
      <source name="dev.ukanth.ufirewall.plugin.LocaleEdit"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void finish()&gt;"/>  
        <node method="LocaleEdit finish" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.internal.RootToolsInternalMethods"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;,android.content.Intent offerSuperUser(android.app.Activity,int)"/>  
      <source name="com.stericson.roottools.internal.RootToolsInternalMethods"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r3, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript()&gt;,void setCustomScript()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.CustomScriptActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript()&gt;"/>  
        <node method="MainActivity setCustomScript" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity setCustomScript" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/CustomScriptActivity;&quot;)"/>  
        <node method="MainActivity setCustomScript" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1201)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableOrEnable()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;,void showLog()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;"/>  
        <node method="MainActivity showLog" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showLog" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/LogActivity;&quot;)"/>  
        <node method="MainActivity showLog" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1203)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void showAbout()&gt;,void showAbout()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.HelpActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showAbout()&gt;"/>  
        <node method="MainActivity showAbout" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showAbout" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/HelpActivity;&quot;)"/>  
        <node method="MainActivity showAbout" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1200)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void showRules()&gt;,void showRules()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showRules()&gt;"/>  
        <node method="MainActivity showRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/RulesActivity;&quot;)"/>  
        <node method="MainActivity showRules" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1202)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;,void showLog()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.OldLogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showLog()&gt;"/>  
        <node method="MainActivity showLog" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showLog" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/OldLogActivity;&quot;)"/>  
        <node method="MainActivity showLog" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1203)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void showPreferences()&gt;,void showPreferences()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void showPreferences()&gt;"/>  
        <node method="MainActivity showPreferences" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity showPreferences" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/preferences/PreferencesActivity;&quot;)"/>  
        <node method="MainActivity showPreferences" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1205)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$8: boolean onSelection(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$8: boolean onSelection(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$8: boolean onSelection(com.afollestad.materialdialogs.MaterialDialog,android.view.View,int,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,void onPostExecute(java.lang.Object), &lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="LockPatternActivity$1 onPostExecute" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;($r3)"/>  
        <node method="LockPatternActivity$1 onPostExecute" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,void onPostExecute(java.lang.Object), &lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="LockPatternActivity$1 onPostExecute" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;haibison.android.lockpattern.LockPatternActivity: android.content.Intent access$300(haibison.android.lockpattern.LockPatternActivity)&gt;($r3)"/>  
        <node method="LockPatternActivity$1 onPostExecute" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, -1, $r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;,void finishWithResultOk(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$100(haibison.android.lockpattern.LockPatternActivity,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithResultOk(char[])&gt;"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithResultOk" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.util.SecurityUtil"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.util.SecurityUtil"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.util.SecurityUtil"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.util.SecurityUtil"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.util.SecurityUtil"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.util.SecurityUtil"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.util.SecurityUtil"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;,void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;,void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;,void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;,void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;,void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;,void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void logDmesgChangeApplyRules(dev.ukanth.ufirewall.events.LogChangeEvent)&gt;"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity logDmesgChangeApplyRules" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$PreferencesActivity$qQKJVeef5pjpQfve_BKA9LbW3Eg': void accept(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void lambda$subscribe$0(dev.ukanth.ufirewall.preferences.PreferencesActivity,java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void ruleChangeApplyRules(dev.ukanth.ufirewall.events.RulesEvent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;,haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder setPattern(char[])&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder setPattern" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternComparator(android.content.Context,char[])&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.StatusWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile1: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.StatusWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetOldActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetOldActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="ToggleWidgetOldActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.internal.RootToolsInternalMethods"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;,android.content.Intent offerBusyBox(android.app.Activity,int)"/>  
      <source name="com.stericson.roottools.internal.RootToolsInternalMethods"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r3, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;,&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;,&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$ZOS3OXrmCOVpoNyVtmIXEyWQLi0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$onSharedPreferenceChanged$4(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$NXCGFMGshppW7zm-6TBvVmLd98Q': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$null$3(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void updateFixLeakScript(boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.'-$$Lambda$ExpPreferenceFragment$M9AVvDgtB2EWSb-EWlYbyWIgJow': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void lambda$updateFixLeakScript$6(dev.ukanth.ufirewall.preferences.ExpPreferenceFragment,boolean,android.content.Context,java.lang.String,android.app.Activity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment: void deleteFiles(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ToggleTileService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void runProfile(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void switchAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;,void confirmResetPasswords(android.preference.ListPreference)"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="CreateMethod" unit="$r8 = new android.content.Intent"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="SetAttribute" unit="specialinvoke $r8.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r6, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void startActivityForResult(android.content.Intent,int)&gt;($r8, 9755)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;,void showPatternActivity()"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.CREATE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r2, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 9877)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;,void confirmResetPasswords(android.preference.ListPreference)"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="CreateMethod" unit="$r8 = new android.content.Intent"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="SetAttribute" unit="specialinvoke $r8.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r6, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void startActivityForResult(android.content.Intent,int)&gt;($r8, 9755)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;,void showPatternActivity()"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.CREATE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void showPatternActivity()&gt;"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r2, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecPreferenceFragment showPatternActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 9877)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;,void confirmResetPasswords(android.preference.ListPreference)"/>  
      <source name="dev.ukanth.ufirewall.preferences.SecPreferenceFragment"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void confirmResetPasswords(android.preference.ListPreference)&gt;"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="CreateMethod" unit="$r8 = new android.content.Intent"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="SetAttribute" unit="specialinvoke $r8.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r6, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecPreferenceFragment confirmResetPasswords" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.SecPreferenceFragment: void startActivityForResult(android.content.Intent,int)&gt;($r8, 9755)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.broadcast.OnBootReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="OnBootReceiver onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/ApplyOnBootService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="OnBootReceiver onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/ApplyOnBootService;&quot;)"/>  
        <node method="OnBootReceiver onReceive" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.OnBootReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OnBootReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.broadcast.OnBootReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.DataDumpActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.DataDumpActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="DataDumpActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void setContentView(int)&gt;(2131427428)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.OldLogActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.OldLogActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.OldLogActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.OldLogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.OldLogActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="DataDumpActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void setContentView(int)&gt;(2131427428)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$13: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1400(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ToggleTileService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DefaultProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.internal.RootToolsInternalMethods"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerBusyBox(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerBusyBox(android.app.Activity)&gt;,void offerBusyBox(android.app.Activity)"/>  
      <source name="com.stericson.roottools.internal.RootToolsInternalMethods"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerBusyBox(android.app.Activity)&gt;"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.RootTools"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.RootTools: void offerBusyBox(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.RootTools: void offerBusyBox(android.app.Activity)&gt;,&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerBusyBox(android.app.Activity)&gt;,void offerBusyBox(android.app.Activity)"/>  
      <source name="com.stericson.roottools.RootTools"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.RootTools: void offerBusyBox(android.app.Activity)&gt;"/>  
        <node method="&lt;com.stericson.roottools.internal.RootToolsInternalMethods: void offerBusyBox(android.app.Activity)&gt;"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$MainActivity$RunApply$1$7lkUVIGTDm_KpPVX0ujmpsZKdqk': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply$1: void lambda$cbFunc$0(dev.ukanth.ufirewall.MainActivity$RunApply$1,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void deleteStartFixFiles(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$poEbIKlqarsU3_FPgzzyzaG-wWM': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$deleteStartFixFiles$4(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setLogTarget(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="CreateMethod" unit="$r9 = new android.content.Intent"/>  
        <node method="PreferencesActivity onSharedPreferenceChanged" type="SetAttribute" unit="specialinvoke $r9.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.ProfileActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.ProfileActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.ProfileActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.ProfileActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.ProfileActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ProfileActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.ProfileActivity: void setContentView(int)&gt;(2131427427)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushOtherRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void access$500(haibison.android.lockpattern.LockPatternActivity,int)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile3: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.FireReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$DisableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean fastApply(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ApplyOnBootService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.FirewallService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.FirewallService: void addNotification()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.FirewallService: void addNotification()&gt;,void addNotification()"/>  
      <source name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: void addNotification()&gt;"/>  
        <node method="FirewallService addNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="FirewallService addNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.FirewallService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.FirewallService: void onCreate()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.FirewallService: void onCreate()&gt;,&lt;dev.ukanth.ufirewall.service.FirewallService: void addNotification()&gt;,void addNotification()"/>  
      <source name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: void onCreate()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.FirewallService: void addNotification()&gt;"/>  
        <node method="FirewallService addNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="FirewallService addNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="FirewallService addNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$1PVZF4V5EIyZNIJnYeiJ7PcHRcE': void onCommandResult(int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$processCommands$0(dev.ukanth.ufirewall.service.RootCommand,int,int,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="MainActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="MainActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void setCustomScript(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;,void initContentView()"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;"/>  
        <node method="LockPatternActivity initContentView" type="setContentView" unit="virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void onConfigurationChanged(android.content.res.Configuration)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void onConfigurationChanged(android.content.res.Configuration)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;,void initContentView()"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void onConfigurationChanged(android.content.res.Configuration)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;"/>  
        <node method="LockPatternActivity initContentView" type="setContentView" unit="virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$10: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$10: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$10: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$10: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$10: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$10: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.FireReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$5: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$5: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$5: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$5: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$5: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$5: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$Profile2: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void clearLog(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$4: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendNetworkInterfaces(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runNetworkInterface(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void applyOrSaveRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onPause()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyRule(android.content.Context,java.lang.String,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.FireReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$6: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$6: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$6: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$6: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$6: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver$6: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.LogService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="LogService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="LogService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.LogService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity$4$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.OldLogActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.OldLogActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.OldLogActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="dev.ukanth.ufirewall.activity.OldLogActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.OldLogActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="OldLogActivity onOptionsItemSelected" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="OldLogActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/LogActivity;&quot;)"/>  
        <node method="OldLogActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.OldLogActivity: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.broadcast.PackageBroadcast"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;,void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;,void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onTouchEvent(android.view.MotionEvent)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.LogActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.OldLogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="LogActivity onOptionsItemSelected" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="LogActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/activity/OldLogActivity;&quot;)"/>  
        <node method="LogActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.LogActivity: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.util.FingerprintUtil"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.FingerprintUtil$FingerprintDialog: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.FingerprintUtil$FingerprintDialog: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.util.FingerprintUtil"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.FingerprintUtil$FingerprintDialog: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="FingerprintUtil$FingerprintDialog onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.util.FingerprintUtil$FingerprintDialog: void setContentView(int)&gt;(2131427379)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.RootTools"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.RootTools: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.RootTools: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;,android.content.Intent offerBusyBox(android.app.Activity,int), &lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;"/>  
      <source name="com.stericson.roottools.RootTools"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.RootTools: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;"/>  
        <node method="RootTools offerBusyBox" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke $r1.&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerBusyBox(android.app.Activity,int)&gt;($r0, $i0)"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerBusyBox" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r3, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.stericson.roottools.RootTools"> 
    <intentSummary> 
      <method value="&lt;com.stericson.roottools.RootTools: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;"/>  
      <methodtrace value="&lt;com.stericson.roottools.RootTools: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;,android.content.Intent offerSuperUser(android.app.Activity,int), &lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;"/>  
      <source name="com.stericson.roottools.RootTools"/>  
      <nodes> 
        <node method="&lt;com.stericson.roottools.RootTools: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;"/>  
        <node method="RootTools offerSuperUser" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke $r1.&lt;com.stericson.roottools.internal.RootToolsInternalMethods: android.content.Intent offerSuperUser(android.app.Activity,int)&gt;($r0, $i0)"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="RootToolsInternalMethods offerSuperUser" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r3, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="interICC_android.intent.action.SEND, "/>  
      <sender action="android.intent.action.SEND" type="plain/text"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="RulesActivity onOptionsItemSelected" type="CreateMethod" unit="$r8 = new android.content.Intent"/>  
        <node method="RulesActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke $r8.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND&quot;)"/>  
        <node method="RulesActivity onOptionsItemSelected" type="SetAttribute" unit="virtualinvoke $r8.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;plain/text&quot;)"/>  
        <node method="RulesActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.RulesActivity: void startActivity(android.content.Intent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void populateData(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void fetchIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.LogActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity$2: void onItemClick(dev.ukanth.ufirewall.log.LogData)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity$2: void onItemClick(dev.ukanth.ufirewall.log.LogData)&gt;,void onItemClick(dev.ukanth.ufirewall.log.LogData)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <destinition name="dev.ukanth.ufirewall.activity.LogDetailActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity$2: void onItemClick(dev.ukanth.ufirewall.log.LogData)&gt;"/>  
        <node method="LogActivity$2 onItemClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LogActivity$2 onItemClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Ldev/ukanth/ufirewall/activity/LogDetailActivity;&quot;)"/>  
        <node method="LogActivity$2 onItemClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;dev.ukanth.ufirewall.activity.LogActivity: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity$2: void onItemClick(dev.ukanth.ufirewall.log.LogData)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity$2: void onItemClick(dev.ukanth.ufirewall.log.LogData)&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity$2: void onItemClick(dev.ukanth.ufirewall.log.LogData)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.AppDetailActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AppDetailActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.AppDetailActivity: void setContentView(int)&gt;(2131427360)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="RootShellService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RootShellService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="RootShellService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="RootShellService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="RootShellService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RootShellService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RunApply: void onPostExecute(java.lang.Boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void startCustomRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void startCustomRules()&gt;,void startCustomRules()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.CustomRulesActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startCustomRules()&gt;"/>  
        <node method="MainActivity startCustomRules" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="MainActivity startCustomRules" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/CustomRulesActivity;&quot;)"/>  
        <node method="MainActivity startCustomRules" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void startCustomRules()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void startCustomRules()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startCustomRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.broadcast.PackageBroadcast"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,void cbFunc(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="PackageBroadcast$1 cbFunc" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast$1 cbFunc" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LockPatternActivity onCreate" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity onCreate" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LockPatternActivity onCreate" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity onCreate" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LockPatternActivity onCreate" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity onCreate" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;,void initContentView()"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void initContentView()&gt;"/>  
        <node method="LockPatternActivity initContentView" type="setContentView" unit="virtualinvoke r0.&lt;haibison.android.lockpattern.LockPatternActivity: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ApplyOnBootService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;,&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;,&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;,&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;,&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$ApplyOnBootService$35lpRaDQl2Tqp6YHcn4z-36NSzs': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: void lambda$onStartCommand$0(dev.ukanth.ufirewall.service.ApplyOnBootService)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.ExpPreferenceFragment$1: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="DataDumpActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.DataDumpActivity: void setContentView(int)&gt;(2131427428)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.HelpActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.HelpActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.HelpActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.HelpActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.HelpActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="HelpActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.HelpActivity: void setContentView(int)&gt;(2131427380)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$3: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity: void appendIfconfig(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void runIfconfig(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternCreator(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternCreator(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternCreator(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternCreator(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternCreator(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newPatternCreator(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newCaptchaVerifier(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newCaptchaVerifier(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newCaptchaVerifier(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newCaptchaVerifier(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newCaptchaVerifier(android.content.Context)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;,void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender data="null, null"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: haibison.android.lockpattern.LockPatternActivity$IntentBuilder newCaptchaVerifier(android.content.Context)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity$IntentBuilder: void &lt;init&gt;(android.content.Context,java.lang.Class,java.lang.String)&gt;"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity$IntentBuilder &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r3, null, $r1, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$EnableFirewall: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void access$200(dev.ukanth.ufirewall.widget.ToggleWidgetActivity,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void startAction(int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void invokeAction()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.LogService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;,void onTaskRemoved(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;"/>  
        <node method="LogService onTaskRemoved" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;,void onTaskRemoved(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;"/>  
        <node method="LogService onTaskRemoved" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="LogService onTaskRemoved" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="LogService onTaskRemoved" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(2, 1000L, $r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;,void onTaskRemoved(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.LogService: void onTaskRemoved(android.content.Intent)&gt;"/>  
        <node method="LogService onTaskRemoved" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.LogService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.LocaleEdit"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void finish()&gt;,void finish()"/>  
      <source name="dev.ukanth.ufirewall.plugin.LocaleEdit"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void finish()&gt;"/>  
        <node method="LocaleEdit finish" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;,&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile: void menuActiviated()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity$GenericProfile$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateFixLeakScript(android.content.Context)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$NqpjRjeLt_vs_Od5Fwxra1Vu9II': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$updateFixLeakScript$5(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$2900(dev.ukanth.ufirewall.MainActivity,eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;,&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$11: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$1000(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void purgeRules()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Object doInBackground(java.lang.Object[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$PurgeTask: java.lang.Boolean doInBackground(java.lang.Void[])&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="haibison.android.lockpattern.LockPatternActivity"> 
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;,&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;,void finishWithNegativeResult(int)"/>  
      <source name="haibison.android.lockpattern.LockPatternActivity"/>  
      <nodes> 
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;haibison.android.lockpattern.LockPatternActivity: void finishWithNegativeResult(int)&gt;"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;(r0, $i0, $r2)"/>  
        <node method="LockPatternActivity finishWithNegativeResult" type="CreateMethod" unit="$r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.ConnectivityChangeReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ToggleTileService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.ToggleTileService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ToggleTileService: void onClick()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RootShellService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService$2: void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void access$100()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.RulesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.activity.RulesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.RulesActivity$6: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void flushAllRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.RulesApplyService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RulesApplyService onHandleIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="RulesApplyService onHandleIntent" type="PassOutIntent" unit="virtualinvoke r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RulesApplyService onHandleIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RulesApplyService onHandleIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.RulesApplyService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RulesApplyService onHandleIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RulesApplyService onHandleIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.RulesApplyService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.RulesApplyService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void checkAndCopyFixLeak(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$8tVgYqkWL-AqPtjSbjOHba5YFy0': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$checkAndCopyFixLeak$6(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.util.AppListArrayAdapter"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)&gt;,&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="dev.ukanth.ufirewall.util.AppListArrayAdapter"/>  
      <destinition name="dev.ukanth.ufirewall.activity.AppDetailActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.AppListArrayAdapter$1: void onClick(android.view.View)&gt;"/>  
        <node method="AppListArrayAdapter$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AppListArrayAdapter$1 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/activity/AppDetailActivity;&quot;)"/>  
        <node method="AppListArrayAdapter$1 onClick" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="AppListArrayAdapter$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ToggleWidgetOldActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.ToggleWidgetOldActivity: void setContentView(int)&gt;(2131427438)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;,void errorNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void errorNotification(android.content.Context)&gt;"/>  
        <node method="Api errorNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api errorNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="Api errorNotification" type="PassOutIntent" unit="$r9 = virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$1$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChains(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyDefaultChainsv6(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applyIPv6Quick(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.LogDetailActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogDetailActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogDetailActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogDetailActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogDetailActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LogDetailActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.LogDetailActivity: void setContentView(int)&gt;(2131427387)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.StatusWidget"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.StatusWidget: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.StatusWidget: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.StatusWidget: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;,void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.TOGGLE_REQUEST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void showWidget(android.content.Context,android.appwidget.AppWidgetManager,int[],boolean)&gt;"/>  
        <node method="StatusWidget showWidget" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="StatusWidget showWidget" type="SetAttribute" unit="specialinvoke $r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="StatusWidget showWidget" type="SetAttribute" unit="virtualinvoke $r6.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.TOGGLE_REQUEST&quot;)"/>  
        <node method="StatusWidget showWidget" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131296604, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="StatusWidget onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.StatusWidget: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.StatusWidget: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean purgeIptables(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.broadcast.PackageBroadcast"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;,void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PackageBroadcast onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void addNotification(android.content.Context,java.lang.String)&gt;,void addNotification(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void addNotification(android.content.Context,java.lang.String)&gt;"/>  
        <node method="PackageBroadcast addNotification" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="virtualinvoke $r7.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="virtualinvoke $r7.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="PackageBroadcast addNotification" type="SetAttribute" unit="virtualinvoke $r7.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="PackageBroadcast addNotification" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;,void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast$1: void &lt;init&gt;(dev.ukanth.ufirewall.broadcast.PackageBroadcast,android.content.Intent,android.content.Context)&gt;"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PackageBroadcast$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.broadcast.PackageBroadcast"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.broadcast.PackageBroadcast: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void applicationRemoved(android.content.Context,int,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void deviceCheck()&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.InterfaceTracker"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.InterfaceTracker"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker$2: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.LocaleEdit"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.plugin.LocaleEdit"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LocaleEdit onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.LocaleEdit: void setContentView(int)&gt;(2131427435)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.Api"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.Api"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.Api$LogProbeCallback: void cbFunc(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateLogRules(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void apply46(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.service.ApplyOnBootService"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r7, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.service.LogService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="ApplyOnBootService onStartCommand" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ApplyOnBootService onStartCommand" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Ldev/ukanth/ufirewall/service/LogService;&quot;)"/>  
        <node method="ApplyOnBootService onStartCommand" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.service.ApplyOnBootService"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.service.ApplyOnBootService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyRulesOnChange(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.InterfaceTracker: void applyBootRules(java.lang.String)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;,&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.preferences.RulesPreferenceFragment"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.preferences.RulesPreferenceFragment: void updateRuleStatus()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void getChainStatus(android.content.Context,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.MainActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void setContentView(int)&gt;(2131427388)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void registerNetworkObserver()&gt;,void registerNetworkObserver()"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.FirewallService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void registerNetworkObserver()&gt;"/>  
        <node method="MainActivity registerNetworkObserver" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MainActivity registerNetworkObserver" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Ldev/ukanth/ufirewall/service/FirewallService;&quot;)"/>  
        <node method="MainActivity registerNetworkObserver" type="PassOutIntent" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;,&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;,&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;,void setEnabled(android.content.Context,boolean,boolean)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.widget.StatusWidget"/>  
      <sender action="dev.ukanth.ufirewall.intent.action.STATUS_CHANGED"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity$RootCheck: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void access$300(dev.ukanth.ufirewall.MainActivity)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void disableFirewall()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void setEnabled(android.content.Context,boolean,boolean)&gt;"/>  
        <node method="Api setEnabled" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/widget/StatusWidget;&quot;)"/>  
        <node method="Api setEnabled" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;dev.ukanth.ufirewall.intent.action.STATUS_CHANGED&quot;)"/>  
        <node method="Api setEnabled" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.MainActivity: void setContentView(int)&gt;(2131427388)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.MainActivity"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.MainActivity: void startRootShell(eu.chainfire.libsuperuser.Shell$Interactive)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.plugin.FireReceiver"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;,void updateNotification(boolean,android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <sender action="android.intent.action.MAIN" category="android.intent.category.LAUNCHER" flags="FLAG_ACTIVITY_CLEAR_TOP FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void updateNotification(boolean,android.content.Context)&gt;"/>  
        <node method="Api updateNotification" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;android.intent.action.MAIN&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent addCategory(java.lang.String)&gt;(&quot;android.intent.category.LAUNCHER&quot;)"/>  
        <node method="Api updateNotification" type="SetAttribute" unit="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(603979776)"/>  
        <node method="Api updateNotification" type="PassOutIntent" unit="virtualinvoke $r10.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;,void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$3"/>  
      <sender action="UPDATEUI"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void processCommands(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void sendUpdate(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.'-$$Lambda$RootShellService$8ejRLo5HeQpHv2MQV5MKUtG4WVU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void lambda$sendUpdate$1(dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="SetAttribute" unit="virtualinvoke $r0.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;UPDATEUI&quot;)"/>  
        <node method="RootShellService lambda$sendUpdate$1" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;,void reOpenShell(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.service.RootShellService"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void reOpenShell(android.content.Context)&gt;"/>  
        <node method="RootShellService reOpenShell" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="RootShellService reOpenShell" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Ldev/ukanth/ufirewall/service/RootShellService;&quot;)"/>  
        <node method="RootShellService reOpenShell" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;,void createNotification(android.content.Context)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void createNotification(android.content.Context)&gt;"/>  
        <node method="RootShellService createNotification" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="RootShellService createNotification" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Ldev/ukanth/ufirewall/MainActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;dev.ukanth.ufirewall.plugin.FireReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="FireReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;,&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;,&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;,&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;,void sendToastBroadcast(android.content.Context,java.lang.String)"/>  
      <source name="dev.ukanth.ufirewall.plugin.FireReceiver"/>  
      <destinition name="dev.ukanth.ufirewall.MainActivity$2"/>  
      <sender action="TOAST"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.plugin.FireReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIptablesRules(android.content.Context,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.'-$$Lambda$Api$1NinZXWQtVzIE5Dm7vRnnFW16KU': void run()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void lambda$applySavedIptablesRules$1(boolean[],android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: boolean applySavedIp4tablesRules(android.content.Context,java.util.List,boolean,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootCommand: void run(android.content.Context,java.util.List)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runScriptAsRoot(android.content.Context,java.util.List,dev.ukanth.ufirewall.service.RootCommand)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void runNextSubmission()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.service.RootShellService: void complete(dev.ukanth.ufirewall.service.RootCommand,int)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void sendToastBroadcast(android.content.Context,java.lang.String)&gt;"/>  
        <node method="Api sendToastBroadcast" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Api sendToastBroadcast" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;TOAST&quot;)"/>  
        <node method="Api sendToastBroadcast" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.widget.ToggleWidgetActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ToggleWidgetActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.widget.ToggleWidgetActivity: void setContentView(int)&gt;(2131427439)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.activity.LogActivity"> 
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LogActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.LogActivity: void setContentView(int)&gt;(2131427385)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;,void requestPassword()"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <destinition name="haibison.android.lockpattern.LockPatternActivity"/>  
      <sender action="haibison.android.lockpattern.LockPatternActivity.COMPARE_PATTERN" data="null"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void requestPassword()&gt;"/>  
        <node method="SecurityUtil requestPassword" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SecurityUtil requestPassword" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)&gt;($r1, null, $r3, class &quot;Lhaibison/android/lockpattern/LockPatternActivity;&quot;)"/>  
        <node method="SecurityUtil requestPassword" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 9755)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;,&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;,&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;,&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="market://search?q=pub:ukpriya"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: boolean passCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.util.SecurityUtil: void deviceCheck()&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api: void donateDialog(android.content.Context,boolean)&gt;"/>  
        <node method="&lt;dev.ukanth.ufirewall.Api$5: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="Api$5 onClick" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Api$5 onClick" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/>  
        <node method="Api$5 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="dev.ukanth.ufirewall.activity.LogActivity"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.activity.LogActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LogActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.activity.LogActivity: void setContentView(int)&gt;(2131427385)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="dev.ukanth.ufirewall.preferences.PreferencesActivity"> 
    <FragmentSummary> 
      <method value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onBuildHeaders(java.util.List)&gt;"/>  
      <methodtrace value="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onBuildHeaders(java.util.List)&gt;,void onBuildHeaders(java.util.List)"/>  
      <source name="dev.ukanth.ufirewall.preferences.PreferencesActivity"/>  
      <destinition name="dev.ukanth.ufirewall.preferences.ExpPreferenceFragment, dev.ukanth.ufirewall.preferences.RulesPreferenceFragment, dev.ukanth.ufirewall.preferences.CustomBinaryPreferenceFragment, dev.ukanth.ufirewall.preferences.LanguagePreferenceFragment, dev.ukanth.ufirewall.preferences.MultiProfilePreferenceFragment, dev.ukanth.ufirewall.preferences.UIPreferenceFragment, dev.ukanth.ufirewall.preferences.WidgetPreferenceFragment, dev.ukanth.ufirewall.preferences.SecPreferenceFragment, dev.ukanth.ufirewall.preferences.LogPreferenceFragment"/>  
      <nodes> 
        <node method="&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void onBuildHeaders(java.util.List)&gt;"/>  
        <node method="PreferencesActivity onBuildHeaders" type="LoadFunction" unit="virtualinvoke r0.&lt;dev.ukanth.ufirewall.preferences.PreferencesActivity: void loadHeadersFromResource(int,java.util.List)&gt;(2131951621, $r1)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
</root>
