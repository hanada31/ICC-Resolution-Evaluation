<?xml version="1.0" encoding="UTF-8"?>

<root> 
  <Component source="com.csipsimple.widgets.HorizontalQuickActionWindow"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.HorizontalQuickActionWindow"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.HorizontalQuickActionWindow"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.HorizontalQuickActionWindow"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.PrefsFilters"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onAccountClicked(long)&gt;,void onAccountClicked(long)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsFilters"/>  
      <destinition name="com.csipsimple.ui.filters.AccountFilters"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onAccountClicked(long)&gt;"/>  
        <node method="PrefsFilters onAccountClicked" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="PrefsFilters onAccountClicked" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/filters/AccountFilters;&quot;)"/>  
        <node method="PrefsFilters onAccountClicked" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.PrefsFilters: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.MessageFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;,void chooseSipUri()"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;"/>  
        <node method="MessageFragment chooseSipUri" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MessageFragment chooseSipUri" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="MessageFragment chooseSipUri" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.MessageFragment: void startActivityForResult(android.content.Intent,int)&gt;(r1, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.db.DBProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;,void broadcastRegistrationChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.service.REGISTRATION_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;"/>  
        <node method="DBProvider broadcastRegistrationChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastRegistrationChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.REGISTRATION_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastRegistrationChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;,void showDetails(long,java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;"/>  
        <node method="AccountsEditListFragment showDetails" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment showDetails" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="AccountsEditListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenuItem"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuItem"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuItem"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipNotifications"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMissedCall(android.content.ContentValues)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMissedCall(android.content.ContentValues)&gt;,void showNotificationForMissedCall(android.content.ContentValues)"/>  
      <source name="com.csipsimple.service.SipNotifications"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.CALLLOG" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMissedCall(android.content.ContentValues)&gt;"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.CALLLOG&quot;)"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenuItem"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;,com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuItem"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
        <node method="ActionMenuItem setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;,com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuItem"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
        <node method="ActionMenuItem setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SipHome onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SipHome onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SipHome onActivityResult" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SipHome onActivityResult" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="SipHome onActivityResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void sendBroadcast(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.AudioTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.AudioTester: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.AudioTester: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.AudioTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.AudioTester: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AudioTester onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.AudioTester: void setContentView(int)&gt;(2130903071)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuItemWrapper"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;,com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemWrapper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
        <node method="MenuItemWrapper setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuItemImpl"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;"/>  
        <node method="MenuItemImpl getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;,android.app.PendingIntent getIntent()"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.contacts.ContactsUtils3"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.contacts.ContactsUtils3: android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.contacts.ContactsUtils3: android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)&gt;,android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.utils.contacts.ContactsUtils3"/>  
      <sender action="android.intent.action.INSERT"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.contacts.ContactsUtils3: android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)&gt;"/>  
        <node method="ContactsUtils3 getAddContactIntent" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ContactsUtils3 getAddContactIntent" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.INSERT&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.GenericPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;,void setPreferenceScreenType(java.lang.Class,java.lang.String,int)"/>  
      <source name="com.csipsimple.ui.prefs.GenericPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Tanstagi"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.wizards.impl.Tanstagi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;"/>  
        <node method="Tanstagi$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Tanstagi$1 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.hc.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;,void onBuildHeaders(java.util.List)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFilters, com.csipsimple.ui.prefs.PrefsFilters"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST, com.csipsimple.ui.action.PREFS_FAST, com.csipsimple.ui.action.PREFS_FAST"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;,void onBuildHeaders(java.util.List)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFilters, com.csipsimple.ui.prefs.PrefsFilters, com.csipsimple.ui.prefs.PrefsFilters, com.csipsimple.ui.prefs.PrefsFilters"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST, com.csipsimple.ui.action.PREFS_FAST, com.csipsimple.ui.action.PREFS_FAST, com.csipsimple.ui.action.PREFS_FAST"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;,void onBuildHeaders(java.util.List)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFilters, com.csipsimple.ui.prefs.PrefsFilters, com.csipsimple.ui.prefs.PrefsFilters"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST, com.csipsimple.ui.action.PREFS_FAST"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs onBuildHeaders" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onBuildHeaders" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuItemImpl"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;,com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
        <node method="MenuItemImpl setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;,com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
        <node method="MenuItemImpl setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.help.Help"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="Help onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.contacts.ContactsUtils5"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.contacts.ContactsUtils5: android.content.Intent getViewContactIntent(java.lang.Long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.contacts.ContactsUtils5: android.content.Intent getViewContactIntent(java.lang.Long)&gt;,android.content.Intent getViewContactIntent(java.lang.Long)"/>  
      <source name="com.csipsimple.utils.contacts.ContactsUtils5"/>  
      <sender action="android.intent.action.VIEW"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.contacts.ContactsUtils5: android.content.Intent getViewContactIntent(java.lang.Long)&gt;"/>  
        <node method="ContactsUtils5 getViewContactIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ContactsUtils5 getViewContactIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="ContactsUtils5 getViewContactIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;,android.app.PendingIntent getPendingIntentForTimer(int)"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.ExtraPlugins"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;,java.util.Map getDynPlugins(android.content.Context,java.lang.String)"/>  
      <source name="com.csipsimple.utils.ExtraPlugins"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;,void onClickAddAccount()"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setHistoryMaxSize(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setHistoryMaxSize(int)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setHistoryMaxSize(int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.db.DBProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;,void broadcastAccountChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider, com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACCOUNT_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;"/>  
        <node method="DBProvider broadcastAccountChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastAccountChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACCOUNT_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastAccountChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="InCallActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isIntentRegistered(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isIntentRegistered(android.content.Context,android.content.Intent)&gt;,boolean isIntentRegistered(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isIntentRegistered(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester isIntentRegistered" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester isIntentRegistered" type="PassOutIntent" unit="$r3 = virtualinvoke $r2.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65536)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallLogHelper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallLogHelper: void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallLogHelper: void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)&gt;,void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)"/>  
      <source name="com.csipsimple.utils.CallLogHelper"/>  
      <destinition name="interICC_de.ub0r.android.callmeter.SAVE_SIPCALL, "/>  
      <sender action="de.ub0r.android.callmeter.SAVE_SIPCALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallLogHelper: void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)&gt;"/>  
        <node method="CallLogHelper addCallLog" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CallLogHelper addCallLog" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;de.ub0r.android.callmeter.SAVE_SIPCALL&quot;)"/>  
        <node method="CallLogHelper addCallLog" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogDetailsFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void onClick(android.view.View)&gt;"/>  
        <node method="CallLogDetailsFragment$2 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setActivitySorter(com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setActivitySorter(com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setActivitySorter(com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;,void broadCastAndroidCallState(java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_android.intent.action.PHONE_STATE, "/>  
      <sender action="android.intent.action.PHONE_STATE"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.PHONE_STATE&quot;)"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r3, &quot;android.permission.READ_PHONE_STATE&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallMediaControl"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallMediaControl: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallMediaControl: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallMediaControl: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="InCallMediaControl onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallMediaControl: void setContentView(int)&gt;(2130903104)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.NightlyUpdater"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.utils.NightlyUpdater"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.utils.NightlyUpdater"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenuItem"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuItem"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()&gt;"/>  
        <node method="ActionMenuItem getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.contacts.ContactsUtils3"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.contacts.ContactsUtils3: android.content.Intent getViewContactIntent(java.lang.Long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.contacts.ContactsUtils3: android.content.Intent getViewContactIntent(java.lang.Long)&gt;,android.content.Intent getViewContactIntent(java.lang.Long)"/>  
      <source name="com.csipsimple.utils.contacts.ContactsUtils3"/>  
      <sender action="android.intent.action.VIEW"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.contacts.ContactsUtils3: android.content.Intent getViewContactIntent(java.lang.Long)&gt;"/>  
        <node method="ContactsUtils3 getViewContactIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ContactsUtils3 getViewContactIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="ContactsUtils3 getViewContactIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.plugins.codecs.ReceiverSilk"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.codecs.ReceiverSilk: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.codecs.ReceiverSilk: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.codecs.ReceiverSilk: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ReceiverSilk onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.codecs.ReceiverSilk: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.codecs.ReceiverSilk: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.codecs.ReceiverSilk: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ReceiverSilk onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.codecs.ReceiverSilk: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent getIntent()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent getIntent()&gt;"/>  
        <node method="ActivityChooserModel getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;,android.content.Intent getIntentForType(int)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
        <node method="MainPrefs getIntentForType" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MainPrefs getIntentForType" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/cupcake/PrefsLoaderActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;,void onClickAddAccount()"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onBackPressed()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onBackPressed()&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onBackPressed()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.NightlyUpdater"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;,void applyUpdate(android.content.Intent)"/>  
      <source name="com.csipsimple.utils.NightlyUpdater"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
        <node method="NightlyUpdater applyUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;,void applyUpdate(android.content.Intent)"/>  
      <source name="com.csipsimple.utils.NightlyUpdater"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="application/vnd.android.package-archive" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
        <node method="NightlyUpdater applyUpdate" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r3, &quot;application/vnd.android.package-archive&quot;)"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="NightlyUpdater applyUpdate" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;,void onClickAddAccount()"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.Downloader"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="Downloader onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="Downloader onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.csipsimple.service.Downloader: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void access$7(com.actionbarsherlock.widget.ActivityChooserModel)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void access$7(com.actionbarsherlock.widget.ActivityChooserModel)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void access$7(com.actionbarsherlock.widget.ActivityChooserModel)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Mondotalk"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <destinition name="com.csipsimple.wizards.impl.MondotalkCreate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;"/>  
        <node method="Mondotalk$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Mondotalk$1 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r5, class &quot;Lcom/csipsimple/wizards/impl/MondotalkCreate;&quot;)"/>  
        <node method="Mondotalk$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivityForResult(android.content.Intent,int)&gt;($r2, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="SipService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.csipsimple.service.SipService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="SipService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.Compatibility"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: android.content.Intent getContactPhoneIntent()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: android.content.Intent getContactPhoneIntent()&gt;,android.content.Intent getContactPhoneIntent()"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <sender action="android.intent.action.PICK" data="content://com.android.contacts/contacts"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: android.content.Intent getContactPhoneIntent()&gt;"/>  
        <node method="Compatibility getContactPhoneIntent" type="CreateMethod" unit="r0 = new android.content.Intent"/>  
        <node method="Compatibility getContactPhoneIntent" type="SetAttribute" unit="specialinvoke r0.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.PICK&quot;)"/>  
        <node method="Compatibility getContactPhoneIntent" type="SetAttribute" unit="virtualinvoke r0.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: android.content.Intent getContactPhoneIntent()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: android.content.Intent getContactPhoneIntent()&gt;,android.content.Intent getContactPhoneIntent()"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <sender action="android.intent.action.PICK" data="new android.net.Uri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: android.content.Intent getContactPhoneIntent()&gt;"/>  
        <node method="Compatibility getContactPhoneIntent" type="CreateMethod" unit="r0 = new android.content.Intent"/>  
        <node method="Compatibility getContactPhoneIntent" type="SetAttribute" unit="specialinvoke r0.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.PICK&quot;)"/>  
        <node method="Compatibility getContactPhoneIntent" type="SetAttribute" unit="virtualinvoke r0.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;,android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenu"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ShareActionProvider"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)&gt;,boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)&gt;"/>  
        <node method="ShareActionProvider$ShareAcitivityChooserModelPolicy onChooseActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$3: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$3: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$3: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;,void launchCallHandler(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver launchCallHandler" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="UAStateReceiver launchCallHandler" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$6(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$6(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$6(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.GenericPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenSub(java.lang.String,java.lang.Class,java.lang.Class,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenSub(java.lang.String,java.lang.Class,java.lang.Class,int)&gt;,void setPreferenceScreenSub(java.lang.String,java.lang.Class,java.lang.Class,int), &lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.GenericPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenSub(java.lang.String,java.lang.Class,java.lang.Class,int)&gt;"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void run()&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void access$7(com.actionbarsherlock.widget.ActivityChooserModel)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void run()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void access$7(com.actionbarsherlock.widget.ActivityChooserModel)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$3(com.csipsimple.pjsip.UAStateReceiver,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$3(com.csipsimple.pjsip.UAStateReceiver,java.lang.String,java.lang.String)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;,void broadCastAndroidCallState(java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_android.intent.action.PHONE_STATE, "/>  
      <sender action="android.intent.action.PHONE_STATE"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$3(com.csipsimple.pjsip.UAStateReceiver,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.PHONE_STATE&quot;)"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r3, &quot;android.permission.READ_PHONE_STATE&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,void onListItemClick(android.widget.ListView,android.view.View,int,long)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="MainPrefs onListItemClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onListItemClick" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onListItemClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onListItemClick" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onListItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void startActivity(android.content.Intent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuItemImpl"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;,android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.Compatibility"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;,boolean shouldUsePriviledgedIntegration(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,java.util.List resolveActivitiesForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="InCallActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipNotifications"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;,void showNotificationForCall(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.service.SipNotifications"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="SipNotifications showNotificationForCall" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForCall" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="SipNotifications showNotificationForCall" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="SipNotifications showNotificationForCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PhoneCapabilityTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isSmsIntentRegistered(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isSmsIntentRegistered(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isIntentRegistered(android.content.Context,android.content.Intent)&gt;,boolean isIntentRegistered(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isSmsIntentRegistered(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isIntentRegistered(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester isIntentRegistered" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester isIntentRegistered" type="PassOutIntent" unit="$r3 = virtualinvoke $r2.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isSmsIntentRegistered(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isSmsIntentRegistered(android.content.Context)&gt;,boolean isSmsIntentRegistered(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isIntentRegistered(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.PhoneCapabilityTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isSmsIntentRegistered(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester isSmsIntentRegistered" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester isIntentRegistered" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester isIntentRegistered" type="PassOutIntent" unit="$r3 = virtualinvoke $r2.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65536)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.Theme"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Theme: java.util.HashMap getAvailableThemes(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Theme: java.util.HashMap getAvailableThemes(android.content.Context)&gt;,java.util.HashMap getAvailableThemes(android.content.Context)"/>  
      <source name="com.csipsimple.utils.Theme"/>  
      <destinition name="interICC_com.csipsimple.themes.GET_DRAWABLES, "/>  
      <sender action="com.csipsimple.themes.GET_DRAWABLES"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Theme: java.util.HashMap getAvailableThemes(android.content.Context)&gt;"/>  
        <node method="Theme getAvailableThemes" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="Theme getAvailableThemes" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.themes.GET_DRAWABLES&quot;)"/>  
        <node method="Theme getAvailableThemes" type="PassOutIntent" unit="$r8 = virtualinvoke $r7.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r3, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenu"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()&gt;"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActionMenuItem invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$5: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;,void onClickAddAccount()"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;,void disconnect(boolean)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;"/>  
        <node method="SipHome disconnect" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome disconnect" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_OUTGOING_UNREGISTER&quot;)"/>  
        <node method="SipHome disconnect" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockCompat"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.RewriterPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.RewriterPlugin: java.util.Map getAvailableRewriters(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.RewriterPlugin: java.util.Map getAvailableRewriters(android.content.Context)&gt;,java.util.Map getAvailableRewriters(android.content.Context)"/>  
      <source name="com.csipsimple.utils.RewriterPlugin"/>  
      <destinition name="interICC_com.csipsimple.phone.action.REWRITE_NUMBER, "/>  
      <sender action="com.csipsimple.phone.action.REWRITE_NUMBER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.RewriterPlugin: java.util.Map getAvailableRewriters(android.content.Context)&gt;"/>  
        <node method="RewriterPlugin getAvailableRewriters" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="RewriterPlugin getAvailableRewriters" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.REWRITE_NUMBER&quot;)"/>  
        <node method="RewriterPlugin getAvailableRewriters" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean onKeyDown(int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onBackPressed()&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean onKeyDown(int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onBackPressed()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$6(com.csipsimple.ui.SipHome,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$6(com.csipsimple.ui.SipHome,boolean)&gt;,&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;,void disconnect(boolean)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$6(com.csipsimple.ui.SipHome,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;"/>  
        <node method="SipHome disconnect" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome disconnect" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_OUTGOING_UNREGISTER&quot;)"/>  
        <node method="SipHome disconnect" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$2(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$2(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;,void launchCallHandler(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$2(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver launchCallHandler" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="UAStateReceiver launchCallHandler" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuBuilder"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void placeCall(java.lang.String,java.lang.Long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void placeCall(java.lang.String,java.lang.Long)&gt;,void placeCall(java.lang.String,java.lang.Long)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void placeCall(java.lang.String,java.lang.Long)&gt;"/>  
        <node method="CallLogListFragment placeCall" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CallLogListFragment placeCall" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallLogListFragment placeCall" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="CallLogListFragment placeCall" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="CallLogListFragment placeCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuBuilder"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.RewriterPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.RewriterPlugin: java.lang.String rewriteNumber(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.RewriterPlugin: java.lang.String rewriteNumber(android.content.Context,java.lang.String,java.lang.String)&gt;,java.lang.String rewriteNumber(android.content.Context,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.utils.RewriterPlugin"/>  
      <destinition name="interICC_com.csipsimple.phone.action.REWRITE_NUMBER, "/>  
      <sender action="com.csipsimple.phone.action.REWRITE_NUMBER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.RewriterPlugin: java.lang.String rewriteNumber(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="RewriterPlugin rewriteNumber" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="RewriterPlugin rewriteNumber" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.REWRITE_NUMBER&quot;)"/>  
        <node method="RewriterPlugin rewriteNumber" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r5)"/>  
        <node method="RewriterPlugin rewriteNumber" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r3, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, r4, null, -1, null, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuBuilder"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;,boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap), &lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromRetValue" unit="$r15 = virtualinvoke r16.&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;()"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;,boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap), &lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromRetValue" unit="$r15 = virtualinvoke r7.&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;()"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuBuilder"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenuView"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuView"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuView"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuView"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;,void actionModeDialpad()"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.DIAL, "/>  
      <sender action="android.intent.action.DIAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
        <node method="CallLogListFragment actionModeDialpad" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r6)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;,void actionModeDialpad()"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.DIAL, "/>  
      <sender action="android.intent.action.DIAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
        <node method="CallLogListFragment actionModeDialpad" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r6)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.audio.AudioFocus3"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.audio.AudioFocus3: void restartMusic()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.audio.AudioFocus3: void restartMusic()&gt;,void restartMusic()"/>  
      <source name="com.csipsimple.utils.audio.AudioFocus3"/>  
      <destinition name="interICC_com.android.music.musicservicecommand.togglepause, "/>  
      <sender action="com.android.music.musicservicecommand.togglepause"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.audio.AudioFocus3: void restartMusic()&gt;"/>  
        <node method="AudioFocus3 restartMusic" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="AudioFocus3 restartMusic" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.music.musicservicecommand.togglepause&quot;)"/>  
        <node method="AudioFocus3 restartMusic" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.audio.AudioFocus3"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.audio.AudioFocus3: void unFocus()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.audio.AudioFocus3: void unFocus()&gt;,&lt;com.csipsimple.utils.audio.AudioFocus3: void restartMusic()&gt;,void restartMusic()"/>  
      <source name="com.csipsimple.utils.audio.AudioFocus3"/>  
      <destinition name="interICC_com.android.music.musicservicecommand.togglepause, "/>  
      <sender action="com.android.music.musicservicecommand.togglepause"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.audio.AudioFocus3: void unFocus()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.audio.AudioFocus3: void restartMusic()&gt;"/>  
        <node method="AudioFocus3 restartMusic" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="AudioFocus3 restartMusic" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.music.musicservicecommand.togglepause&quot;)"/>  
        <node method="AudioFocus3 restartMusic" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.MessageFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;,void chooseSipUri()"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;"/>  
        <node method="MessageFragment chooseSipUri" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MessageFragment chooseSipUri" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="MessageFragment chooseSipUri" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.MessageFragment: void startActivityForResult(android.content.Intent,int)&gt;(r1, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.SipProfileJson"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.Compatibility"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PreferencesWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PreferencesWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.SipProfileJson"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.SipProfileJson"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONObject serializeSipSettings(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.SipProfileJson"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.SipProfileJson"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.SipProfileJson"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;,void onClickAddAccount()"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void access$1(com.csipsimple.ui.account.AccountsEditListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onClickAddAccount()&gt;"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="AccountsEditListFragment onClickAddAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivityForResult(android.content.Intent,int)&gt;($r1, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;,&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean restoreSipConfiguration(android.content.Context,java.io.File)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: void restoreSipSettings(android.content.Context,org.json.JSONObject)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;,&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment$3$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: boolean saveSipConfiguration(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.SipProfileJson: org.json.JSONArray serializeSipProfiles(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.Compatibility"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,boolean canMakeGSMCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.HorizontalQuickActionWindow"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.HorizontalQuickActionWindow"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int), &lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;,android.content.Intent chooseActivity(int)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ShareActionProvider"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r6 = virtualinvoke $r5.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r6 = virtualinvoke $r5.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r6 = virtualinvoke $r5.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r6 = virtualinvoke $r5.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r6 = virtualinvoke $r5.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r6 = virtualinvoke $r5.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/>  
        <node method="ShareActionProvider$ShareMenuItemOnMenuItemClickListener onMenuItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.MessageFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.MessageFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;,void chooseSipUri()"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void chooseSipUri()&gt;"/>  
        <node method="MessageFragment chooseSipUri" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MessageFragment chooseSipUri" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="MessageFragment chooseSipUri" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.MessageFragment: void startActivityForResult(android.content.Intent,int)&gt;(r1, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void sendMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.app.SherlockFragmentActivity"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.actionbarsherlock.app.SherlockFragmentActivity"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(int)&gt;"/>  
        <node method="SherlockFragmentActivity setContentView" type="setContentView" unit="virtualinvoke $r1.&lt;com.actionbarsherlock.ActionBarSherlock: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.DialingFeedback"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.DialingFeedback"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="InCallActivity onCreate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="InCallActivity onCreate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="InCallActivity onCreate" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, $r7, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="InCallActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void setContentView(int)&gt;(2130903103)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.DialingFeedback: void &lt;init&gt;(android.app.Activity,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;, &lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;, &lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;, &lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;, &lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.app.SherlockListActivity"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.app.SherlockListActivity: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.app.SherlockListActivity: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.actionbarsherlock.app.SherlockListActivity"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.app.SherlockListActivity: void setContentView(int)&gt;"/>  
        <node method="SherlockListActivity setContentView" type="setContentView" unit="virtualinvoke $r1.&lt;com.actionbarsherlock.ActionBarSherlock: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsChooserListActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.account.AccountsChooserListActivity"/>  
      <destinition name="com.csipsimple.ui.account.AccountsChooserListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsChooserListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void setContentView(int)&gt;(2130903064)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.PrefsFilters"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsFilters"/>  
      <destinition name="com.csipsimple.ui.account.AccountsChooserListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsChooserListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void setContentView(int)&gt;(2130903064)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="InCallActivity onTrigger" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void startActivityForResult(android.content.Intent,int)&gt;($r16, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="InCallActivity onTrigger" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void startActivityForResult(android.content.Intent,int)&gt;($r16, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/incall/InCallMediaControl;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/incall/InCallMediaControl;&quot;)"/>  
        <node method="InCallActivity onTrigger" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void startActivity(android.content.Intent)&gt;($r16)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="InCallActivity onTrigger" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void startActivityForResult(android.content.Intent,int)&gt;($r16, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/>  
        <node method="InCallActivity onTrigger" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void startActivityForResult(android.content.Intent,int)&gt;($r16, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/incall/InCallMediaControl;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/PickupSipUri;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/>  
        <node method="InCallActivity onTrigger" type="SetAttribute" unit="specialinvoke $r16.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/incall/InCallMediaControl;&quot;)"/>  
        <node method="InCallActivity onTrigger" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: void startActivity(android.content.Intent)&gt;($r16)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,void onTrigger(int,com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="InCallActivity onTrigger" type="CreateMethod" unit="$r16 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_zrtp_show_sas(int,org.pjsip.pjsua.pj_str_t,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_zrtp_show_sas(int,org.pjsip.pjsua.pj_str_t,int)&gt;,void on_zrtp_show_sas(int,org.pjsip.pjsua.pj_str_t,int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.SHOW_SAS, "/>  
      <sender action="com.csipsimple.service.SHOW_SAS"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_zrtp_show_sas(int,org.pjsip.pjsua.pj_str_t,int)&gt;"/>  
        <node method="UAStateReceiver on_zrtp_show_sas" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver on_zrtp_show_sas" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SHOW_SAS&quot;)"/>  
        <node method="UAStateReceiver on_zrtp_show_sas" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setDefaultActivity(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setDefaultActivity(int)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setDefaultActivity(int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.Compatibility"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.Compatibility"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.PreferencesWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.utils.PreferencesWrapper"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.PrefsLogic"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="com.csipsimple.ui.prefs.AudioTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/csipsimple/ui/prefs/AudioTester;&quot;)"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.AudioTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/csipsimple/ui/prefs/AudioTester;&quot;)"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)&gt;"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,java.lang.String,java.lang.String,int,android.content.Intent)&gt;"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CollectLogs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;,android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)"/>  
      <source name="com.csipsimple.utils.CollectLogs"/>  
      <sender action="android.intent.action.SEND" type="message/rfc822"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;"/>  
        <node method="CollectLogs getLogReportIntent" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CollectLogs getLogReportIntent" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND&quot;)"/>  
        <node method="CollectLogs getLogReportIntent" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;message/rfc822&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;,void stopRecording(int)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_RECORDED, "/>  
      <sender action="com.csipsimple.service.CALL_RECORDED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
        <node method="PjSipService stopRecording" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="PjSipService stopRecording" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_RECORDED&quot;)"/>  
        <node method="PjSipService stopRecording" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onTextChanged(java.lang.CharSequence,int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void setAudioInCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void setAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/>  
        <node method="AccountWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099902, $r11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;,void updateWidget(android.content.Context), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;,void updateWidget(android.content.Context), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099902, $r11)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;,android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AccountWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.widgets.AccountWidgetProvider: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AccountWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.widgets.AccountWidgetProvider: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AccountWidgetProvider onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AccountWidgetProvider onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/>  
        <node method="AccountWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099902, $r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AccountWidgetProvider onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AccountWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.widgets.AccountWidgetProvider: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;,android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void setSpeakerphoneOn(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void setSpeakerphoneOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setSpeakerphoneOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1$16: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1$16: void doRun()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void setSpeakerphoneOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1$16: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setSpeakerphoneOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setSpeakerphoneOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.app.SherlockActivity"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.app.SherlockActivity: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.app.SherlockActivity: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.actionbarsherlock.app.SherlockActivity"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.app.SherlockActivity: void setContentView(int)&gt;"/>  
        <node method="SherlockActivity setContentView" type="setContentView" unit="virtualinvoke $r1.&lt;com.actionbarsherlock.ActionBarSherlock: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.PrefsFast"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsFast: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsFast: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsFast"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsFast: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="PrefsFast onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.PrefsFast: void setContentView(int)&gt;(2130903091)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Mondotalk"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockNative"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockNative: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockNative: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockNative"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockNative: void setContentView(int)&gt;"/>  
        <node method="ActionBarSherlockNative setContentView" type="setContentView" unit="virtualinvoke $r1.&lt;android.view.Window: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.PrefsLogic"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="com.csipsimple.ui.prefs.Codecs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="PrefsLogic afterBuildPrefsForType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PrefsLogic afterBuildPrefsForType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/csipsimple/ui/prefs/Codecs;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.Theme: java.util.HashMap getAvailableThemes(android.content.Context)&gt;,java.util.HashMap getAvailableThemes(android.content.Context)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <destinition name="interICC_com.csipsimple.themes.GET_DRAWABLES, "/>  
      <sender action="com.csipsimple.themes.GET_DRAWABLES"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Theme: java.util.HashMap getAvailableThemes(android.content.Context)&gt;"/>  
        <node method="Theme getAvailableThemes" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="Theme getAvailableThemes" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.themes.GET_DRAWABLES&quot;)"/>  
        <node method="Theme getAvailableThemes" type="PassOutIntent" unit="$r8 = virtualinvoke $r7.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r3, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsLogic"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;,void afterBuildPrefs(), &lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <destinition name="com.csipsimple.ui.prefs.Codecs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;"/>  
        <node method="PrefsLogic afterBuildPrefsForType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PrefsLogic afterBuildPrefsForType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/csipsimple/ui/prefs/Codecs;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;,void afterBuildPrefs(), &lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;,&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;,java.util.Map getDynPlugins(android.content.Context,java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity: void afterBuildPrefs()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void setBluetoothOn(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void setBluetoothOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setBluetoothOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet,int)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetConfigure"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ShortcutWidgetConfigure onCreate" type="CreateMethod" unit="r4 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.audio.AudioFocus3"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.audio.AudioFocus3: void pauseMusic()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.audio.AudioFocus3: void pauseMusic()&gt;,void pauseMusic()"/>  
      <source name="com.csipsimple.utils.audio.AudioFocus3"/>  
      <destinition name="interICC_com.android.music.musicservicecommand.pause, "/>  
      <sender action="com.android.music.musicservicecommand.pause"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.audio.AudioFocus3: void pauseMusic()&gt;"/>  
        <node method="AudioFocus3 pauseMusic" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="AudioFocus3 pauseMusic" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.music.musicservicecommand.pause&quot;)"/>  
        <node method="AudioFocus3 pauseMusic" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.audio.AudioFocus3"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.audio.AudioFocus3: void focus()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.audio.AudioFocus3: void focus()&gt;,&lt;com.csipsimple.utils.audio.AudioFocus3: void pauseMusic()&gt;,void pauseMusic()"/>  
      <source name="com.csipsimple.utils.audio.AudioFocus3"/>  
      <destinition name="interICC_com.android.music.musicservicecommand.pause, "/>  
      <sender action="com.android.music.musicservicecommand.pause"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.audio.AudioFocus3: void focus()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.audio.AudioFocus3: void pauseMusic()&gt;"/>  
        <node method="AudioFocus3 pauseMusic" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="AudioFocus3 pauseMusic" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.music.musicservicecommand.pause&quot;)"/>  
        <node method="AudioFocus3 pauseMusic" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.EditFilter"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.EditFilter: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.EditFilter: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.EditFilter: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="EditFilter onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.EditFilter: void setContentView(int)&gt;(2130903088)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuPopupHelper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean), &lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="DynamicReceiver4 access$0" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="DynamicReceiver4 access$0" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;,void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean), &lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="DynamicReceiver4 access$0" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="DynamicReceiver4 access$0" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,void doRun(), &lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$0(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent,boolean)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="DynamicReceiver4$1 doRun" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 doRun" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 doRun" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4 access$0" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 doRun" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="DynamicReceiver4$1 doRun" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="DynamicReceiver4$1 doRun" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="DynamicReceiver4$1 doRun" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceiveInternal(android.content.Context,android.content.Intent,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.PickupSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.PickupSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.app.SherlockPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.actionbarsherlock.app.SherlockPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(int)&gt;"/>  
        <node method="SherlockPreferenceActivity setContentView" type="setContentView" unit="virtualinvoke $r1.&lt;com.actionbarsherlock.ActionBarSherlock: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void beforeBuildPrefs()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void beforeBuildPrefs()&gt;,void beforeBuildPrefs()"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void beforeBuildPrefs()&gt;"/>  
        <node method="BasePrefsWizard beforeBuildPrefs" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void setContentView(int)&gt;(2130903132)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void access$0(com.csipsimple.widgets.AccountChooserButton)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: int doSchedule(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: int doSchedule(int,int)&gt;,int doSchedule(int,int), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <destinition name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int doSchedule(int,int)&gt;"/>  
        <node method="TimerWrapper doSchedule" type="ReceiveIntentFromRetValue" unit="$r1 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="TimerWrapper doSchedule" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(2, $l2, $r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;,&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;,android.app.PendingIntent getPendingIntentForTimer(int)"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;,int schedule(int,int,int), &lt;com.csipsimple.utils.TimerWrapper: int doSchedule(int,int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <destinition name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;"/>  
        <node method="TimerWrapper doSchedule" type="ReceiveIntentFromRetValue" unit="$r1 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper doSchedule" type="ReceiveIntentFromRetValue" unit="$r1 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper doSchedule" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(2, $l2, $r1)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenu"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="ActionMenu addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent[]"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="ActionMenu addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter5: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="ActionMenu addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent[]"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="ActionMenu addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter5: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenu"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="ActionMenu addIntentOptions" type="CreateMethod" unit="r5 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void adjustStreamVolume(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void adjustStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void adjustStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1: void adjustVolume(com.csipsimple.api.SipCallSession,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1: void adjustVolume(com.csipsimple.api.SipCallSession,int,int)&gt;,&lt;com.csipsimple.pjsip.PjSipService: void adjustStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1: void adjustVolume(com.csipsimple.api.SipCallSession,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void adjustStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void adjustStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1: void adjustVolume(com.csipsimple.api.SipCallSession,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1: void adjustVolume(com.csipsimple.api.SipCallSession,int,int)&gt;,void adjustVolume(com.csipsimple.api.SipCallSession,int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1: void adjustVolume(com.csipsimple.api.SipCallSession,int,int)&gt;"/>  
        <node method="SipService$1 adjustVolume" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipService$1 adjustVolume" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/csipsimple/ui/incall/InCallMediaControl;&quot;)"/>  
        <node method="SipService$1 adjustVolume" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipService$1 adjustVolume" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.csipsimple.service.SipService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099907, $r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void unsetAudioInCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void unsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void unsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_teardown_audio()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_teardown_audio()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void unsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_teardown_audio()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void unsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void unsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void actualUnsetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: int doCancel(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: int doCancel(int)&gt;,int doCancel(int), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int doCancel(int)&gt;"/>  
        <node method="TimerWrapper doCancel" type="ReceiveIntentFromRetValue" unit="$r4 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Tanstagi"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Tanstagi: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Tanstagi: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.wizards.impl.Tanstagi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Tanstagi: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;"/>  
        <node method="Tanstagi$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Tanstagi$1 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void updateWidget(android.content.Context)&gt;,&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099907, $r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetConfigure"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void updateWidget(android.content.Context)&gt;,&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099907, $r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,void onListItemClick(android.widget.ListView,android.view.View,int,long)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="ShortcutWidgetConfigure onListItemClick" type="CreateMethod" unit="r3 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogDetailsFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogDetailsFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,void updateData(android.net.Uri[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="CallLogDetailsFragment updateData" type="CreateMethod" unit="r9 = new android.content.Intent"/>  
        <node method="CallLogDetailsFragment updateData" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,void updateData(android.net.Uri[]), &lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="CallLogDetailsFragment updateData" type="CreateMethod" unit="r9 = new android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment updateData" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogDetailsFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,void updateData(android.net.Uri[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="CallLogDetailsFragment updateData" type="CreateMethod" unit="r9 = new android.content.Intent"/>  
        <node method="CallLogDetailsFragment updateData" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;,&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;,void updateData(android.net.Uri[]), &lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$2: void &lt;init&gt;(com.csipsimple.ui.calllog.CallLogDetailsFragment,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void updateData(android.net.Uri[])&gt;"/>  
        <node method="CallLogDetailsFragment updateData" type="CreateMethod" unit="r9 = new android.content.Intent"/>  
        <node method="CallLogDetailsFragment$2 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="CallLogDetailsFragment updateData" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;,void actionModeDialpad()"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.DIAL, "/>  
      <sender action="android.intent.action.DIAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
        <node method="CallLogListFragment actionModeDialpad" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r6)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;,void actionModeDialpad()"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.DIAL, "/>  
      <sender action="android.intent.action.DIAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
        <node method="CallLogListFragment actionModeDialpad" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r6)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$4(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$4(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;,void actionModeDialpad()"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.DIAL, "/>  
      <sender action="android.intent.action.DIAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$4(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
        <node method="CallLogListFragment actionModeDialpad" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r6)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.TimerWrapper"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;,&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;,android.app.PendingIntent getPendingIntentForTimer(int)"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;,int cancel(int,int), &lt;com.csipsimple.utils.TimerWrapper: int doCancel(int)&gt;"/>  
      <source name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;"/>  
        <node method="TimerWrapper doCancel" type="ReceiveIntentFromRetValue" unit="$r4 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper doCancel" type="ReceiveIntentFromRetValue" unit="$r4 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;,&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;,android.app.PendingIntent getPendingIntentForTimer(int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;,int timer_cancel(int,int), &lt;com.csipsimple.utils.TimerWrapper: int cancel(int,int)&gt;"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;,&lt;com.csipsimple.utils.TimerWrapper: int doCancel(int)&gt;,int doCancel(int), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_cancel(int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int doCancel(int)&gt;"/>  
        <node method="TimerWrapper doCancel" type="ReceiveIntentFromRetValue" unit="$r4 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ShortcutWidgetProvider onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ShortcutWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;,void showDetails(long,java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;"/>  
        <node method="AccountsEditListFragment showDetails" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment showDetails" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="AccountsEditListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.VoipTel"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipNotifications"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;,void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)"/>  
      <source name="com.csipsimple.service.SipNotifications"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;,void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)"/>  
      <source name="com.csipsimple.service.SipNotifications"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_mwi_info(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_mwi_info(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;,&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;,void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_mwi_info(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_mwi_info(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_mwi_info(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;,&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;,void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_mwi_info(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForVoiceMail(com.csipsimple.api.SipProfile,int)&gt;"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="SipNotifications showNotificationForVoiceMail" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Zadarma"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager_status(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pjsip_status_code,org.pjsip.pjsua.pj_str_t)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager_status(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pjsip_status_code,org.pjsip.pjsua.pj_str_t)&gt;,void on_pager_status(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pjsip_status_code,org.pjsip.pjsua.pj_str_t)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.MESSAGE_RECEIVED, "/>  
      <sender action="com.csipsimple.service.MESSAGE_RECEIVED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager_status(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pjsip_status_code,org.pjsip.pjsua.pj_str_t)&gt;"/>  
        <node method="UAStateReceiver on_pager_status" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="UAStateReceiver on_pager_status" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MESSAGE_RECEIVED&quot;)"/>  
        <node method="UAStateReceiver on_pager_status" type="PassOutIntent" unit="virtualinvoke $r14.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r6, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetConfigure"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetConfigure"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,void &lt;clinit&gt;(), &lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <sender action="com.csipsimple.phone.action.DIALER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.DIALER&quot;)"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,void &lt;clinit&gt;(), &lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <sender action="com.csipsimple.phone.action.CALLLOG"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.CALLLOG&quot;)"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,void &lt;clinit&gt;(), &lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <sender action="com.csipsimple.phone.action.FAVORITES"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.FAVORITES&quot;)"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,void &lt;clinit&gt;(), &lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <sender action="com.csipsimple.phone.action.MESSAGES"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.MESSAGES&quot;)"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,void &lt;clinit&gt;(), &lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,void &lt;clinit&gt;(), &lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <sender action="com.csipsimple.ui.action.PREFS_GLOBAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_GLOBAL&quot;)"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure &lt;clinit&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;,&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure: void &lt;clinit&gt;()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetConfigure$Shortcut: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetConfigure$Shortcut &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.hc.PrefsLoaderFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.PrefsLoaderFragment"/>  
      <destinition name="com.csipsimple.ui.prefs.Codecs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="PrefsLogic afterBuildPrefsForType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PrefsLogic afterBuildPrefsForType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/csipsimple/ui/prefs/Codecs;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.PrefsLogic: void afterBuildPrefsForType(android.content.Context,com.csipsimple.ui.prefs.IPreferenceHelper,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.PrefsLoaderFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;,java.util.Map getDynPlugins(android.content.Context,java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.hc.PrefsLoaderFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.PrefsLoaderFragment: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.NightlyUpdater"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.utils.NightlyUpdater"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.utils.NightlyUpdater"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.warnings.WarningUtils"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;,boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.warnings.WarningUtils"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,java.util.List resolveActivitiesForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;,android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,java.util.List resolveActivitiesForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;,android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,java.util.List resolveActivitiesForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;,android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.pm.ResolveInfo resolveActivityForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;,void asyncSanityCheck(), &lt;com.csipsimple.ui.warnings.WarningUtils: boolean shouldWarnPrivilegedIntent(android.content.Context,com.csipsimple.utils.PreferencesProviderWrapper)&gt;"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$3(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void asyncSanityCheck()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.contacts.ContactsUtils5"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.contacts.ContactsUtils5: android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.contacts.ContactsUtils5: android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)&gt;,android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.utils.contacts.ContactsUtils5"/>  
      <sender type="vnd.android.cursor.item/contact"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.contacts.ContactsUtils5: android.content.Intent getAddContactIntent(java.lang.String,java.lang.String)&gt;"/>  
        <node method="ContactsUtils5 getAddContactIntent" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="ContactsUtils5 getAddContactIntent" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;vnd.android.cursor.item/contact&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void run()&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable run" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;,void finishServiceIfNeeded(boolean)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER, com.csipsimple.service.ACTION_DEFER_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void finishServiceIfNeeded(boolean)&gt;"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r3)"/>  
        <node method="OutgoingCallChooser finishServiceIfNeeded" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;,void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;, &lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;,boolean placeCall(android.database.Cursor), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;, &lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment$PluginCallRunnable: void &lt;init&gt;(com.csipsimple.ui.outgoingcall.OutgoingCallListFragment,android.app.PendingIntent,long)&gt;"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: void changeCursor(android.database.Cursor)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallListFragment: boolean placeCall(android.database.Cursor)&gt;"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromRetValue" unit="$r10 = virtualinvoke $r9.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="OutgoingCallListFragment$PluginCallRunnable &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/>  
        <node method="OutgoingCallListFragment placeCall" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: void fillWith(java.lang.String,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: void fillWith(java.lang.String,android.os.Bundle)&gt;,void fillWith(java.lang.String,android.os.Bundle)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void fillWith(java.lang.String,android.os.Bundle)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin$1: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin$1: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void fillWith(java.lang.String,android.os.Bundle)&gt;,void fillWith(java.lang.String,android.os.Bundle)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin$1: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void fillWith(java.lang.String,android.os.Bundle)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallLogListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/calllog/CallLogDetailsActivity;&quot;)"/>  
        <node method="CallLogListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallLogListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/calllog/CallLogDetailsActivity;&quot;)"/>  
        <node method="CallLogListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallLogListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/calllog/CallLogDetailsActivity;&quot;)"/>  
        <node method="CallLogListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallLogListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/calllog/CallLogDetailsActivity;&quot;)"/>  
        <node method="CallLogListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallLogListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/calllog/CallLogDetailsActivity;&quot;)"/>  
        <node method="CallLogListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFilters"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFilters: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFilters: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.filters.AccountFilters"/>  
      <destinition name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFilters: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountFilters onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFilters: void setContentView(int)&gt;(2130903061)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.utils.CallHandlerPlugin"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.utils.CallHandlerPlugin"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$2: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void afterTextChanged(android.text.Editable)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipNotifications"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;,void notifyRegisteredAccounts(java.util.ArrayList,boolean)"/>  
      <source name="com.csipsimple.service.SipNotifications"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.DIALER" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.DIALER&quot;)"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void updateRegistrationsState()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void updateRegistrationsState()&gt;,&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;,void notifyRegisteredAccounts(java.util.ArrayList,boolean)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.DIALER" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void updateRegistrationsState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.DIALER&quot;)"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$AccountStatusContentObserver: void onChange(boolean)&gt;,&lt;com.csipsimple.service.SipService: void updateRegistrationsState()&gt;,&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;,void notifyRegisteredAccounts(java.util.ArrayList,boolean)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.DIALER" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$AccountStatusContentObserver: void onChange(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void updateRegistrationsState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void notifyRegisteredAccounts(java.util.ArrayList,boolean)&gt;"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.DIALER&quot;)"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications notifyRegisteredAccounts" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.MediaManager"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.MediaManager: void toggleMute()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.MediaManager: void toggleMute()&gt;,&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.MediaManager"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.MediaManager: void toggleMute()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$4: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$4: void doRun()&gt;,&lt;com.csipsimple.service.MediaManager: void toggleMute()&gt;,&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$4: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void toggleMute()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.GenericPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;,&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;,void setPreferenceScreenType(java.lang.Class,java.lang.String,int)"/>  
      <source name="com.csipsimple.ui.prefs.GenericPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;,void onPause(), &lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenSub(java.lang.String,java.lang.Class,java.lang.Class,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.GenericPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onPause()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onPause()&gt;,&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;,&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;,void setPreferenceScreenType(java.lang.Class,java.lang.String,int)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onPause()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onPause()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onPause()&gt;,&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;,void onPause(), &lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenSub(java.lang.String,java.lang.Class,java.lang.Class,int)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onPause()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void onPause()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$4: void onClick(android.content.DialogInterface,int)&gt;,&lt;com.csipsimple.ui.SipHome: void access$6(com.csipsimple.ui.SipHome,boolean)&gt;,&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;,void disconnect(boolean)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$6(com.csipsimple.ui.SipHome,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;"/>  
        <node method="SipHome disconnect" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome disconnect" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_OUTGOING_UNREGISTER&quot;)"/>  
        <node method="SipHome disconnect" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuWrapper"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuWrapper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuWrapper addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent[]"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuWrapper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuWrapper addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter5: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1: void makeCallWithOptions(java.lang.String,int,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1: void makeCallWithOptions(java.lang.String,int,android.os.Bundle)&gt;,void makeCallWithOptions(java.lang.String,int,android.os.Bundle)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1: void makeCallWithOptions(java.lang.String,int,android.os.Bundle)&gt;"/>  
        <node method="SipService$1 makeCallWithOptions" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="SipService$1 makeCallWithOptions" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r5, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="SipService$1 makeCallWithOptions" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.csipsimple.service.SipService: android.content.ComponentName startService(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1: void makeCall(java.lang.String,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1: void makeCall(java.lang.String,int)&gt;,&lt;com.csipsimple.service.SipService$1: void makeCallWithOptions(java.lang.String,int,android.os.Bundle)&gt;,void makeCallWithOptions(java.lang.String,int,android.os.Bundle)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1: void makeCall(java.lang.String,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService$1: void makeCallWithOptions(java.lang.String,int,android.os.Bundle)&gt;"/>  
        <node method="SipService$1 makeCallWithOptions" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="SipService$1 makeCallWithOptions" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r5, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="SipService$1 makeCallWithOptions" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.csipsimple.service.SipService: android.content.ComponentName startService(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockCompat"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1$20: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1$20: void doRun()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1$20: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="BasePrefsWizard onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="BasePrefsWizard onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="BasePrefsWizard onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="BasePrefsWizard onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.PickupSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.warnings.WarningVpnIcs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningVpnIcs: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningVpnIcs: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.ui.warnings.WarningVpnIcs"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningVpnIcs: void onClick(android.view.View)&gt;"/>  
        <node method="WarningVpnIcs onClick" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="WarningVpnIcs onClick" type="SetAttribute" unit="specialinvoke $r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="WarningVpnIcs onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onAttachedToWindow()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void updateRegistration()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.view.menu.ActionMenuPresenter"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.HeadsetButtonReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.HeadsetButtonReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.HeadsetButtonReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.HeadsetButtonReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.HeadsetButtonReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="HeadsetButtonReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.HeadsetButtonReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.HeadsetButtonReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.HeadsetButtonReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.HeadsetButtonReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="HeadsetButtonReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.HeadsetButtonReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsLoader"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsLoader"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsLoader"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.Long,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader$FilteredProfile: void &lt;init&gt;(com.csipsimple.ui.account.AccountsLoader,java.lang.String,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;,&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.account.AccountsLoader"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: java.lang.Object loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsLoader: android.database.Cursor loadInBackground()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.favorites.FavAdapter"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.favorites.FavAdapter$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.favorites.FavAdapter$2: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.ui.favorites.FavAdapter"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.favorites.FavAdapter$2: void onClick(android.view.View)&gt;"/>  
        <node method="FavAdapter$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="FavAdapter$2 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="FavAdapter$2 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r14)"/>  
        <node method="FavAdapter$2 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="FavAdapter$2 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099902, $r11)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;,android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockCompat"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockCompat"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockCompat"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFast"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFast"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="SipHome$3 run" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome$3 run" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="SipHome$3 run" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.csipsimple.ui.SipHome: android.content.ComponentName startService(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFast"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="SipHome$3 run" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome$3 run" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="SipHome$3 run" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.csipsimple.ui.SipHome: android.content.ComponentName startService(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFast"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;,&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;,&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,void run()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="SipHome$3 run" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome$3 run" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="SipHome$3 run" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.csipsimple.ui.SipHome: android.content.ComponentName startService(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;,&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;,&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;,&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFast"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipHome postStartSipService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;,&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;,&lt;com.csipsimple.ui.SipHome$3: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;,void postStartSipService()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onResume()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void startSipService()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$3: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$4(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void postStartSipService()&gt;"/>  
        <node method="SipHome postStartSipService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipHome postStartSipService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,void loadActivitiesLocked()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="PassOutIntent" unit="$r1 = virtualinvoke $r4.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r2, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,void loadActivitiesLocked()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserModel"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,void loadActivitiesLocked()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="PassOutIntent" unit="$r1 = virtualinvoke $r4.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r2, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,void loadActivitiesLocked()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserModel"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ShareActionProvider"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,void setShareIntent(android.content.Intent), &lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,void setShareIntent(android.content.Intent), &lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ShareActionProvider setShareIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,void loadActivitiesLocked()"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="PassOutIntent" unit="$r1 = virtualinvoke $r4.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r2, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;,void loadActivitiesLocked()"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()&gt;"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel loadActivitiesLocked" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.widget.ShareActionProvider"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)&gt;"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVideoCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/>  
        <node method="DialerFragment placePluginCall" type="sendOutWrapperredIntent" unit="virtualinvoke $r4.&lt;android.app.PendingIntent: void send()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;,void placePluginCall(com.csipsimple.utils.CallHandlerPlugin), &lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment$5: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void access$3(com.csipsimple.ui.dialpad.DialerFragment,com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placePluginCall(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="DialerFragment placePluginCall" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;com.csipsimple.utils.CallHandlerPlugin: android.app.PendingIntent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCall()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeCallWithOption(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="SipHome onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.plugins.telephony.CallHandler"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="android.intent.action.CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="android.intent.action.CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="android.intent.action.CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.plugins.telephony.CallHandler: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="android.intent.action.CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="CallHandler onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallHandler onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List resolveActivitiesForPriviledgedCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.plugins.telephony.CallHandler: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.PjSipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.PjSipService: void setMicrophoneMute(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.PjSipService: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.pjsip.PjSipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1$15: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1$15: void doRun()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1$15: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setMicrophoneMute(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,void placeVMCall()"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="DialerFragment placeVMCall" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DialerFragment placeVMCall" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="DialerFragment placeVMCall" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,void placeVMCall()"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="DialerFragment placeVMCall" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DialerFragment placeVMCall" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="DialerFragment placeVMCall" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: boolean onLongClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void placeVMCall()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.help.Help"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.GenericPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.String,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.String,int)&gt;,void setPreferenceScreenType(java.lang.String,int), &lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.Class,java.lang.String,int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.GenericPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.GenericPrefs: void setPreferenceScreenType(java.lang.String,int)&gt;"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="GenericPrefs setPreferenceScreenType" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.warnings.WarningPrivilegedIntent"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningPrivilegedIntent: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningPrivilegedIntent: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.ui.warnings.WarningPrivilegedIntent"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningPrivilegedIntent: void onClick(android.view.View)&gt;"/>  
        <node method="WarningPrivilegedIntent onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="WarningPrivilegedIntent onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="WarningPrivilegedIntent onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.Codecs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.Codecs: void setContentView(int)&gt;(2130903078)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="SipService onStart" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="SipService onStart" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.csipsimple.service.SipService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Mondotalk"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <destinition name="com.csipsimple.wizards.impl.MondotalkCreate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;"/>  
        <node method="Mondotalk$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Mondotalk$1 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r5, class &quot;Lcom/csipsimple/wizards/impl/MondotalkCreate;&quot;)"/>  
        <node method="Mondotalk$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivityForResult(android.content.Intent,int)&gt;($r2, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Mondotalk"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Mondotalk: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Mondotalk: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Mondotalk: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.wizards.impl.Mondotalk"/>  
      <destinition name="com.csipsimple.wizards.impl.MondotalkCreate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Mondotalk$1: void onClick(android.view.View)&gt;"/>  
        <node method="Mondotalk$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Mondotalk$1 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r5, class &quot;Lcom/csipsimple/wizards/impl/MondotalkCreate;&quot;)"/>  
        <node method="Mondotalk$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivityForResult(android.content.Intent,int)&gt;($r2, $i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.incall.InCallMediaControl"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallMediaControl: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallMediaControl: void onResume()&gt;,void onResume()"/>  
      <source name="com.csipsimple.ui.incall.InCallMediaControl"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallMediaControl: void onResume()&gt;"/>  
        <node method="InCallMediaControl onResume" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="InCallMediaControl onResume" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="InCallMediaControl onResume" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallMediaControl: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;(r1, $r2, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$DestroyRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$DestroyRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$DestroyRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;,void showDetails(long,java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;"/>  
        <node method="AccountsEditListFragment showDetails" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment showDetails" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="AccountsEditListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="AccountsEditListFragment onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="AccountsEditListFragment onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$RestartRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$StopRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$StopRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$StopRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,void onAttach(android.app.Activity)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="DialerFragment onAttach" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DialerFragment onAttach" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="DialerFragment onAttach" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r3, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,void onAttach(android.app.Activity)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="DialerFragment onAttach" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DialerFragment onAttach" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="DialerFragment onAttach" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r3, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,void onAttach(android.app.Activity)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="DialerFragment onAttach" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DialerFragment onAttach" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="DialerFragment onAttach" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r3, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,void onAttach(android.app.Activity)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="DialerFragment onAttach" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DialerFragment onAttach" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="DialerFragment onAttach" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r3, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.EditSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri$1: void onChooseAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void access$0(com.csipsimple.widgets.EditSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void updateDialTextHelper()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.EditSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.app.SherlockExpandableListActivity"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.actionbarsherlock.app.SherlockExpandableListActivity"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(int)&gt;"/>  
        <node method="SherlockExpandableListActivity setContentView" type="setContentView" unit="virtualinvoke $r1.&lt;com.actionbarsherlock.ActionBarSherlock: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncRestartRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void access$9(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;,void connectService()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;"/>  
        <node method="OutgoingCallChooser connectService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser connectService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="OutgoingCallChooser connectService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;(r2, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;,void connectService()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;"/>  
        <node method="OutgoingCallChooser connectService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser connectService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="OutgoingCallChooser connectService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/>  
        <node method="OutgoingCallChooser connectService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;(r2, $r4, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogDetailsFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="CallLogDetailsFragment$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallLogDetailsFragment$1 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallLogDetailsFragment$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="CallLogDetailsFragment$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="CallLogDetailsFragment$1 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserView"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromRetValue" unit="$r7 = virtualinvoke $r6.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r7)"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromRetValue" unit="$r7 = virtualinvoke $r6.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromRetValue" unit="$r7 = virtualinvoke $r6.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r7)"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromRetValue" unit="$r7 = virtualinvoke $r6.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromRetValue" unit="$r7 = virtualinvoke $r6.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromRetValue" unit="$r7 = virtualinvoke $r6.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i0)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r7)"/>  
        <node method="ActivityChooserView$Callbacks onClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;,void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void loadFrom(java.lang.String,java.lang.String,com.csipsimple.utils.CallHandlerPlugin$OnLoadListener)&gt;"/>  
        <node method="CallHandlerPlugin loadFrom" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin loadFrom" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;($r7)"/>  
        <node method="CallHandlerPlugin loadFrom" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)&gt;(r4, &quot;android.permission.PROCESS_OUTGOING_CALLS&quot;, $r5, $r6, -1, null, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;,void &lt;init&gt;(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: void &lt;init&gt;(android.content.Context)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.MessageFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="MessageFragment onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$SyncStopRunnable: java.lang.Object runWithReturn()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$SyncStopRunnable: java.lang.Object runWithReturn()&gt;,&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$SyncStopRunnable: java.lang.Object runWithReturn()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="ConversationsListFragment viewDetails" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/ui/messages/MessageActivity;&quot;)"/>  
        <node method="ConversationsListFragment viewDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$1: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$1: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$4(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;,void actionModeDialpad()"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.DIAL, "/>  
      <sender action="android.intent.action.DIAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$1: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$4(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void turnOnActionMode()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$CallLogActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void access$2(com.csipsimple.ui.calllog.CallLogListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void actionModeDialpad()&gt;"/>  
        <node method="CallLogListFragment actionModeDialpad" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r6)"/>  
        <node method="CallLogListFragment actionModeDialpad" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DynamicReceiver4 onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4 onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$1: void &lt;init&gt;(com.csipsimple.service.receiver.DynamicReceiver4,android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/>  
        <node method="DynamicReceiver4$1 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.PickupSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="PickupSipUri onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.PickupSipUri: void setContentView(int)&gt;(2130903112)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetConfigure"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,void onAccountClicked(long), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
        <node method="AccountWidgetConfigure onAccountClicked" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,void onAccountClicked(long), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,void onAccountClicked(long), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,void onAccountClicked(long), &lt;com.csipsimple.widgets.AccountWidgetProvider: void updateWidget(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
        <node method="AccountWidgetConfigure onAccountClicked" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int), &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="AccountWidgetProvider buildUpdate" type="ReceiveIntentFromRetValue" unit="$r11 = staticinvoke &lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;($r0, $l1, $z1)"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/>  
        <node method="AccountWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r3.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099902, $r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;,&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;,android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <sender action="com.csipsimple.accounts.activate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onAccountClicked(long)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountWidgetProvider: android.app.PendingIntent getLaunchPendingIntent(android.content.Context,long,boolean)&gt;"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountWidgetProvider getLaunchPendingIntent" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.accounts.activate&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Ippi"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Ippi"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Ippi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Ippi: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipNotifications"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMessage(com.csipsimple.api.SipMessage)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMessage(com.csipsimple.api.SipMessage)&gt;,void showNotificationForMessage(com.csipsimple.api.SipMessage)"/>  
      <source name="com.csipsimple.service.SipNotifications"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.MESSAGES" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMessage(com.csipsimple.api.SipMessage)&gt;"/>  
        <node method="SipNotifications showNotificationForMessage" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForMessage" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.MESSAGES&quot;)"/>  
        <node method="SipNotifications showNotificationForMessage" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications showNotificationForMessage" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;,void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.MESSAGE_RECEIVED, "/>  
      <sender action="com.csipsimple.service.MESSAGE_RECEIVED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
        <node method="UAStateReceiver on_pager" type="CreateMethod" unit="r7 = new android.content.Intent"/>  
        <node method="UAStateReceiver on_pager" type="SetAttribute" unit="specialinvoke r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MESSAGE_RECEIVED&quot;)"/>  
        <node method="UAStateReceiver on_pager" type="PassOutIntent" unit="virtualinvoke $r15.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r7, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;,&lt;com.csipsimple.service.SipNotifications: void showNotificationForMessage(com.csipsimple.api.SipMessage)&gt;,void showNotificationForMessage(com.csipsimple.api.SipMessage)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.MESSAGES" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_pager(int,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t,org.pjsip.pjsua.pj_str_t)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMessage(com.csipsimple.api.SipMessage)&gt;"/>  
        <node method="SipNotifications showNotificationForMessage" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForMessage" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.MESSAGES&quot;)"/>  
        <node method="SipNotifications showNotificationForMessage" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications showNotificationForMessage" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountWidgetConfigure"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <destinition name="com.csipsimple.ui.account.AccountsChooserListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsChooserListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void setContentView(int)&gt;(2130903064)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountWidgetConfigure onCreate" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Cryptel"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.AudioTester"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.AudioTester: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.AudioTester: void onResume()&gt;,void onResume()"/>  
      <source name="com.csipsimple.ui.prefs.AudioTester"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.AudioTester: void onResume()&gt;"/>  
        <node method="AudioTester onResume" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AudioTester onResume" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="AudioTester onResume" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.AudioTester: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r1, $r2, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.VoipTel"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.VoipTel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.VoipTel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_setup_audio()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_setup_audio()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void setAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_setup_audio()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void actualSetAudioInCall()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuItemWrapper"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;,com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuItemWrapper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)&gt;"/>  
        <node method="MenuItemWrapper setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.db.DBProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;,void broadcastRegistrationChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.service.REGISTRATION_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;"/>  
        <node method="DBProvider broadcastRegistrationChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastRegistrationChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.REGISTRATION_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastRegistrationChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;,void broadcastAccountChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider, com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACCOUNT_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;"/>  
        <node method="DBProvider broadcastAccountChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastAccountChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACCOUNT_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastAccountChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.receiver.DynamicReceiver4"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;,&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;,void broadcastVolumeWillBeUpdated(int,int)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_org.openintents.audio.action_volume_update, "/>  
      <sender action="org.openintents.audio.action_volume_update"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void restoreAudioState()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setStreamVolume(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastVolumeWillBeUpdated(int,int)&gt;"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;org.openintents.audio.action_volume_update&quot;)"/>  
        <node method="MediaManager broadcastVolumeWillBeUpdated" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, null)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void create(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void setContext(com.csipsimple.service.SipService)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;,void &lt;init&gt;(com.csipsimple.service.SipService)"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void &lt;init&gt;(com.csipsimple.service.SipService)&gt;"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager &lt;init&gt;" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager &lt;init&gt;" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,&lt;com.csipsimple.service.MediaManager: void startService()&gt;,&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void startService()&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void onBluetoothStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="interICC_com.csipsimple.plugins.action.REGISTER_VIDEO, "/>  
      <sender action="com.csipsimple.plugins.action.REGISTER_VIDEO"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;,&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;,&lt;com.csipsimple.service.SipService: void startSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;,boolean sipStart(), &lt;com.csipsimple.utils.ExtraPlugins: java.util.Map getDynPlugins(android.content.Context,java.lang.String)&gt;"/>  
      <source name="com.csipsimple.service.receiver.DynamicReceiver4"/>  
      <destinition name="com.csipsimple.plugins.codecs.ReceiverSilk"/>  
      <sender action="com.csipsimple.codecs.action.REGISTER_CODEC"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4$2$1: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void access$4(com.csipsimple.service.receiver.DynamicReceiver4,android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.receiver.DynamicReceiver4: void onConnectivityChanged(android.net.NetworkInfo,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void restartSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: void startSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStart()&gt;"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="ExtraPlugins getDynPlugins" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;($r1)"/>  
        <node method="ExtraPlugins getDynPlugins" type="PassOutIntent" unit="$r10 = virtualinvoke $r9.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r6, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.help.Help"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="interICC_android.intent.action.SEND, "/>  
      <sender action="android.intent.action.SEND" type="message/rfc822"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="Help onItemClick" type="ReceiveIntentFromRetValue" unit="r4 = staticinvoke &lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;(&quot;&lt;&lt;&lt;PLEASE ADD THE BUG DESCRIPTION HERE&gt;&gt;&gt;&quot;, $r17)"/>  
        <node method="CollectLogs getLogReportIntent" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CollectLogs getLogReportIntent" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND&quot;)"/>  
        <node method="CollectLogs getLogReportIntent" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;message/rfc822&quot;)"/>  
        <node method="Help onItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.help.Help: void startActivityForResult(android.content.Intent,int)&gt;(r4, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.help.Help$2: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.service.Downloader"/>  
      <sender extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r8)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/Downloader;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.help.Help$2: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;,&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.service.DeviceStateReceiver"/>  
      <sender action="com.csipsimple.action.APPLY_NIGHTLY" extras="Parcelable@-pendingIntent,"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.help.Help$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater$UpdaterPopupLauncher$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r9, class &quot;Lcom/csipsimple/service/DeviceStateReceiver;&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;com.csipsimple.action.APPLY_NIGHTLY&quot;)"/>  
        <node method="NightlyUpdater$UpdaterPopupLauncher$1 onClick" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)&gt;(&quot;pendingIntent&quot;, $r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <sender action="android.intent.action.SEND" type="message/rfc822"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="Help onItemClick" type="ReceiveIntentFromRetValue" unit="r4 = staticinvoke &lt;com.csipsimple.utils.CollectLogs: android.content.Intent getLogReportIntent(java.lang.String,android.content.Context)&gt;(&quot;&lt;&lt;&lt;PLEASE ADD THE BUG DESCRIPTION HERE&gt;&gt;&gt;&quot;, $r17)"/>  
        <node method="CollectLogs getLogReportIntent" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CollectLogs getLogReportIntent" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND&quot;)"/>  
        <node method="CollectLogs getLogReportIntent" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;message/rfc822&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <sender action="android.intent.action.VIEW" data="http://code.google.com/p/csipsimple/issues" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="Help onItemClick" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="Help onItemClick" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Help onItemClick" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="Help onItemClick" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r16)"/>  
        <node method="Help onItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.help.Help: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="Help onItemClick" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="Help onItemClick" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="Help onItemClick" type="PassOutIntent" unit="virtualinvoke $r17.&lt;android.support.v4.app.FragmentActivity: void sendBroadcast(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Tanstagi"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Tanstagi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Tanstagi: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Tanstagi: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.wizards.impl.Tanstagi"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Tanstagi: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Tanstagi: void updateAccountInfos(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Tanstagi$1: void onClick(android.view.View)&gt;"/>  
        <node method="Tanstagi$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="Tanstagi$1 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onDestroy()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onDestroy()&gt;,&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;,void disconnect(boolean)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onDestroy()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;"/>  
        <node method="SipHome disconnect" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome disconnect" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_OUTGOING_UNREGISTER&quot;)"/>  
        <node method="SipHome disconnect" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditList"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditList: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditList: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditList"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditList: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsEditList onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditList: void setContentView(int)&gt;(2130903067)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.view.menu.MenuBuilder"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuBuilder addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent[]"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuBuilder addIntentOptions" type="CreateMethod" unit="r5 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuBuilder addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent[]"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuBuilder addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter5: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])"/>  
      <source name="com.actionbarsherlock.internal.view.menu.MenuBuilder"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])&gt;"/>  
        <node method="MenuBuilder addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter5: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="BasePrefsWizard onOptionsItemSelected" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="BasePrefsWizard onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivityForResult(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.ui.filters.AccountFilters"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="BasePrefsWizard onOptionsItemSelected" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/filters/AccountFilters;&quot;)"/>  
        <node method="BasePrefsWizard onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void startActivityForResult(android.content.Intent,int)&gt;(r2, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.favorites.PresenceStatusSpinner"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.favorites.PresenceStatusSpinner: void onAttachedToWindow()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.favorites.PresenceStatusSpinner: void onAttachedToWindow()&gt;,void onAttachedToWindow()"/>  
      <source name="com.csipsimple.ui.favorites.PresenceStatusSpinner"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.favorites.PresenceStatusSpinner: void onAttachedToWindow()&gt;"/>  
        <node method="PresenceStatusSpinner onAttachedToWindow" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="PresenceStatusSpinner onAttachedToWindow" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="PresenceStatusSpinner onAttachedToWindow" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, $r4, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.prefs.hc.MainPrefs, com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <sender action="com.csipsimple.ui.action.PREFS_GLOBAL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="SipHome onOptionsItemSelected" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="SipHome onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_GLOBAL&quot;)"/>  
        <node method="SipHome onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivityForResult(android.content.Intent,int)&gt;(r3, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;,void disconnect(boolean)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_OUTGOING_UNREGISTER"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void disconnect(boolean)&gt;"/>  
        <node method="SipHome disconnect" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="SipHome disconnect" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_OUTGOING_UNREGISTER&quot;)"/>  
        <node method="SipHome disconnect" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="SipHome onOptionsItemSelected" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="SipHome onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="SipHome onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivityForResult(android.content.Intent,int)&gt;(r3, 0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditList"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="SipHome onOptionsItemSelected" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="SipHome onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/account/AccountsEditList;&quot;)"/>  
        <node method="SipHome onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.hc.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.AudioTester"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/csipsimple/ui/prefs/AudioTester;&quot;)"/>  
        <node method="PrefsLogic onMainActivityOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.PrefsLogic: boolean onMainActivityOptionsItemSelected(com.actionbarsherlock.view.MenuItem,android.content.Context,com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.filters.AccountFiltersListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;,&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;,void showDetails(long)"/>  
      <source name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <destinition name="com.csipsimple.ui.filters.EditFilter"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment$1: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void access$0(com.csipsimple.ui.filters.AccountFiltersListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void onClickAddFilter()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void showDetails(long)&gt;"/>  
        <node method="AccountFiltersListFragment showDetails" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AccountFiltersListFragment showDetails" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/csipsimple/ui/filters/EditFilter;&quot;)"/>  
        <node method="AccountFiltersListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFiltersListFragment: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.messages.MessageFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageFragment: void onAttach(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageFragment: void onAttach(android.app.Activity)&gt;,void onAttach(android.app.Activity)"/>  
      <source name="com.csipsimple.ui.messages.MessageFragment"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageFragment: void onAttach(android.app.Activity)&gt;"/>  
        <node method="MessageFragment onAttach" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="MessageFragment onAttach" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="MessageFragment onAttach" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.support.v4.app.FragmentActivity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, $r5, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.PickupSipUri"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,com.csipsimple.api.SipProfile getSelectedAccount(), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,void sendPositiveResult()"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="PickupSipUri sendPositiveResult" type="CreateMethod" unit="r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;,&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;,&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.ui.PickupSipUri"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.PickupSipUri$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void access$0(com.csipsimple.ui.PickupSipUri)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.PickupSipUri: void sendPositiveResult()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.EditSipUri: com.csipsimple.widgets.EditSipUri$ToCall getValue()&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: com.csipsimple.api.SipProfile getSelectedAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1$21: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1$21: void doRun()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1$21: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1$21: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1$21: void doRun()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;,void stopRecording(int)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_RECORDED, "/>  
      <sender action="com.csipsimple.service.CALL_RECORDED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1$21: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
        <node method="PjSipService stopRecording" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="PjSipService stopRecording" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_RECORDED&quot;)"/>  
        <node method="PjSipService stopRecording" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.BasePrefsWizard"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.account.AccountsEditListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;,void showDetails(long,java.lang.String)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.BasePrefsWizard"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: void showDetails(long,java.lang.String)&gt;"/>  
        <node method="AccountsEditListFragment showDetails" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment showDetails" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/csipsimple/wizards/BasePrefsWizard;&quot;)"/>  
        <node method="AccountsEditListFragment showDetails" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;,boolean onContextItemSelected(android.view.MenuItem)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <destinition name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="AccountsEditListFragment onContextItemSelected" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="AccountsEditListFragment onContextItemSelected" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lcom/csipsimple/wizards/WizardChooser;&quot;)"/>  
        <node method="AccountsEditListFragment onContextItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditListFragment: void startActivityForResult(android.content.Intent,int)&gt;(r3, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.HorizontalQuickActionWindow"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;,&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;,void &lt;init&gt;(android.content.Context,android.view.View)"/>  
      <source name="com.csipsimple.widgets.HorizontalQuickActionWindow"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.util.AttributeSet)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void &lt;init&gt;(android.content.Context,android.view.View)&gt;"/>  
        <node method="HorizontalQuickActionWindow &lt;init&gt;" type="setContentView" unit="specialinvoke r0.&lt;com.csipsimple.widgets.HorizontalQuickActionWindow: void setContentView(int)&gt;(2130903113)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;,&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;,android.app.PendingIntent getPendingIntentForTimer(int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;,&lt;com.csipsimple.utils.TimerWrapper: int doSchedule(int,int)&gt;,int doSchedule(int,int), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.utils.TimerWrapper"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: int doSchedule(int,int)&gt;"/>  
        <node method="TimerWrapper doSchedule" type="ReceiveIntentFromRetValue" unit="$r1 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="TimerWrapper doSchedule" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(2, $l2, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;,int timer_schedule(int,int,int), &lt;com.csipsimple.utils.TimerWrapper: int schedule(int,int,int)&gt;"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: int timer_schedule(int,int,int)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1$14: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1$14: void doRun()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void setBluetoothOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;,&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;,void broadcastMediaChanged()"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="interICC_com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED, "/>  
      <sender action="com.csipsimple.service.MEDIA_CHANGED, com.csipsimple.service.MEDIA_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1$14: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void setBluetoothOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void setBluetoothOn(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.service.MediaManager: void broadcastMediaChanged()&gt;"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MediaManager broadcastMediaChanged" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.MEDIA_CHANGED&quot;)"/>  
        <node method="MediaManager broadcastMediaChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;($r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$1: void sendMessage(java.lang.String,java.lang.String,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$1: void sendMessage(java.lang.String,java.lang.String,long)&gt;,void sendMessage(java.lang.String,java.lang.String,long)"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$1: void sendMessage(java.lang.String,java.lang.String,long)&gt;"/>  
        <node method="SipService$1 sendMessage" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="SipService$1 sendMessage" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="SipService$1 sendMessage" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: android.content.ComponentName startService(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.DeviceStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;,void applyUpdate(android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
        <node method="NightlyUpdater applyUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="application/vnd.android.package-archive" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.DeviceStateReceiver: android.content.Intent getIntent()&gt;()"/>  
        <node method="NightlyUpdater applyUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NightlyUpdater applyUpdate" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r3, &quot;application/vnd.android.package-archive&quot;)"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="NightlyUpdater applyUpdate" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.DeviceStateReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.DeviceStateReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="DeviceStateReceiver onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="DeviceStateReceiver onReceive" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.DeviceStateReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;,void applyUpdate(android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="application/vnd.android.package-archive" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.NightlyUpdater: void applyUpdate(android.content.Intent)&gt;"/>  
        <node method="NightlyUpdater applyUpdate" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r3, &quot;application/vnd.android.package-archive&quot;)"/>  
        <node method="NightlyUpdater applyUpdate" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="NightlyUpdater applyUpdate" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.DeviceStateReceiver"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.DeviceStateReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DeviceStateReceiver onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="DeviceStateReceiver onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/csipsimple/service/SipService;&quot;)"/>  
        <node method="DeviceStateReceiver onReceive" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.Downloader"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.csipsimple.service.Downloader: android.content.Intent getIntent()&gt;()"/>  
        <node method="Downloader onHandleIntent" type="PassOutIntent" unit="virtualinvoke r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r12)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="CreateMethod" unit="$r33 = new android.content.Intent"/>  
        <node method="Downloader onHandleIntent" type="SetAttribute" unit="specialinvoke $r33.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/SipHome;&quot;)"/>  
        <node method="Downloader onHandleIntent" type="PassOutIntent" unit="virtualinvoke r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r12)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="PassOutIntent" unit="virtualinvoke r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r12)"/>  
        <node method="Downloader onHandleIntent" type="PassOutIntent" unit="virtualinvoke r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r12)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="CreateMethod" unit="$r33 = new android.content.Intent"/>  
        <node method="Downloader onHandleIntent" type="SetAttribute" unit="specialinvoke $r33.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/SipHome;&quot;)"/>  
        <node method="Downloader onHandleIntent" type="PassOutIntent" unit="virtualinvoke r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r12)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.csipsimple.service.Downloader: android.content.Intent getIntent()&gt;()"/>  
        <node method="Downloader onHandleIntent" type="PassOutIntent" unit="virtualinvoke r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r12)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.csipsimple.service.Downloader"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.Downloader: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="Downloader onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.ShortcutWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;,&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;,android.widget.RemoteViews buildUpdate(android.content.Context,int)"/>  
      <source name="com.csipsimple.widgets.ShortcutWidgetProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.ShortcutWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)&gt;"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="ShortcutWidgetProvider buildUpdate" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;(2131099907, $r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.PreferenceProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: boolean onCreate()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.MondotalkCreate"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.MondotalkCreate: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.MondotalkCreate: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.wizards.impl.MondotalkCreate"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.MondotalkCreate: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MondotalkCreate onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.impl.MondotalkCreate: void setContentView(int)&gt;(2130903123)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.db.DBProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;,void broadcastRegistrationChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.service.REGISTRATION_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;"/>  
        <node method="DBProvider broadcastRegistrationChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastRegistrationChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.REGISTRATION_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastRegistrationChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;,void broadcastAccountChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider, com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACCOUNT_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;"/>  
        <node method="DBProvider broadcastAccountChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastAccountChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACCOUNT_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastAccountChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.internal.ActionBarSherlockCompat"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;,boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap), &lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromRetValue" unit="$r15 = virtualinvoke r16.&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;()"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="PassOutIntent" unit="virtualinvoke $r7.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;,boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap), &lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)&gt;"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromRetValue" unit="$r15 = virtualinvoke r7.&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()&gt;()"/>  
        <node method="MenuBuilder bindNativeOverflow" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;,&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;,boolean invoke()"/>  
      <source name="com.actionbarsherlock.internal.ActionBarSherlockCompat"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()&gt;"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="MenuItemImpl invoke" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;,&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;,void showNotificationForCall(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="SipNotifications showNotificationForCall" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForCall" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="SipNotifications showNotificationForCall" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="SipNotifications showNotificationForCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;,void launchCallHandler(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver launchCallHandler" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="UAStateReceiver launchCallHandler" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;,void broadCastAndroidCallState(java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_android.intent.action.PHONE_STATE, "/>  
      <sender action="android.intent.action.PHONE_STATE"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_incoming_call(int,int,org.pjsip.pjsua.SWIGTYPE_p_pjsip_rx_data)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.PHONE_STATE&quot;)"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r3, &quot;android.permission.READ_PHONE_STATE&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_state(int,org.pjsip.pjsua.pjsip_event)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_state(int,org.pjsip.pjsua.pjsip_event)&gt;,&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_state(int,org.pjsip.pjsua.pjsip_event)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_state(int,org.pjsip.pjsua.pjsip_event)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_state(int,org.pjsip.pjsua.pjsip_event)&gt;,&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;,void stopRecording(int)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_RECORDED, "/>  
      <sender action="com.csipsimple.service.CALL_RECORDED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_state(int,org.pjsip.pjsua.pjsip_event)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void stopRecording(int)&gt;"/>  
        <node method="PjSipService stopRecording" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="PjSipService stopRecording" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_RECORDED&quot;)"/>  
        <node method="PjSipService stopRecording" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_media_state(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_media_state(int)&gt;,&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void on_call_media_state(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void startRecording(int)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void updateRecordingStatus(int,boolean,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Cryptel"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Cryptel"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Cryptel: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.cupcake.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;, &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromRetValue" unit="$r5 = specialinvoke r0.&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;(0)"/>  
        <node method="MainPrefs getIntentForType" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MainPrefs getIntentForType" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/cupcake/PrefsLoaderActivity;&quot;)"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;, &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromRetValue" unit="$r5 = specialinvoke r0.&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;(20)"/>  
        <node method="MainPrefs getIntentForType" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MainPrefs getIntentForType" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/cupcake/PrefsLoaderActivity;&quot;)"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;, &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromRetValue" unit="$r5 = specialinvoke r0.&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;(40)"/>  
        <node method="MainPrefs getIntentForType" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MainPrefs getIntentForType" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/cupcake/PrefsLoaderActivity;&quot;)"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;, &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <sender action="com.csipsimple.ui.action.PREFS_FAST"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainPrefs onCreate" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.ui.action.PREFS_FAST&quot;)"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;, &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.PrefsFilters"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainPrefs onCreate" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/PrefsFilters;&quot;)"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle), &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;, &lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.cupcake.PrefsLoaderActivity"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromRetValue" unit="$r5 = specialinvoke r0.&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: android.content.Intent getIntentForType(int)&gt;(60)"/>  
        <node method="MainPrefs getIntentForType" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="MainPrefs getIntentForType" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/csipsimple/ui/prefs/cupcake/PrefsLoaderActivity;&quot;)"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs onCreate" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;,void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs$PrefGroup: void &lt;init&gt;(com.csipsimple.ui.prefs.cupcake.MainPrefs,int,int,int,android.content.Intent)&gt;"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent"/>  
        <node method="MainPrefs$PrefGroup &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter4: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.cupcake.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.cupcake.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void fetchCalls()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void fetchCalls()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void placeCall(java.lang.String,java.lang.Long)&gt;,void placeCall(java.lang.String,java.lang.Long)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="interICC_android.intent.action.CALL, "/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void fetchCalls()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void placeCall(java.lang.String,java.lang.Long)&gt;"/>  
        <node method="CallLogListFragment placeCall" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CallLogListFragment placeCall" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="CallLogListFragment placeCall" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="CallLogListFragment placeCall" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="CallLogListFragment placeCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentActivity: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.WizardChooser"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.WizardChooser: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.WizardChooser: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.wizards.WizardChooser"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.WizardChooser: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="WizardChooser onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.WizardChooser: void setContentView(int)&gt;(2130903068)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.PreferenceProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;,&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.PreferenceProvider"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.PreferenceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void resetAllDefaultValues()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void setFirstRunParameters(com.csipsimple.utils.PreferencesWrapper)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.wizards.impl.Zadarma"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,void saveAccount(java.lang.String)"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="BasePrefsWizard saveAccount" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BasePrefsWizard saveAccount" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="BasePrefsWizard saveAccount" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.wizards.BasePrefsWizard: void sendBroadcast(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;,&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.wizards.impl.Zadarma"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: void fillLayout(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.impl.Zadarma: boolean saveAndQuit()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAndFinish()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount()&gt;"/>  
        <node method="&lt;com.csipsimple.wizards.BasePrefsWizard: void saveAccount(java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.widgets.AccountChooserButton"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;,void setAccount(com.csipsimple.api.SipProfile), &lt;com.csipsimple.utils.Compatibility: boolean canMakeGSMCall(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.widgets.AccountChooserButton"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2: void onLoad(com.csipsimple.utils.CallHandlerPlugin)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton$2$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.widgets.AccountChooserButton: void setAccount(com.csipsimple.api.SipProfile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: void setContentView(int)&gt;(2130903134)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;,void connectService()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;"/>  
        <node method="OutgoingCallChooser connectService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser connectService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="OutgoingCallChooser connectService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;(r2, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;,void connectService()"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.service.SipService"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void connectService()&gt;"/>  
        <node method="OutgoingCallChooser connectService" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="OutgoingCallChooser connectService" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.SipService&quot;)"/>  
        <node method="OutgoingCallChooser connectService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/>  
        <node method="OutgoingCallChooser connectService" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;(r2, $r4, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="OutgoingCallChooser onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void setContentView(int)&gt;(2130903111)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.OutgoingCall"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.OutgoingCall: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.OutgoingCall: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.service.OutgoingCall: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <destinition name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <sender action="android.intent.action.CALL" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="OutgoingCall onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="OutgoingCall onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL&quot;)"/>  
        <node method="OutgoingCall onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r12)"/>  
        <node method="OutgoingCall onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)&gt;($r1, $r4)"/>  
        <node method="OutgoingCall onReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="OutgoingCall onReceive" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;,java.util.Map getAvailableCallHandlers(android.content.Context)"/>  
      <source name="com.csipsimple.service.OutgoingCall"/>  
      <destinition name="com.csipsimple.plugins.telephony.CallHandler"/>  
      <sender action="com.csipsimple.phone.action.HANDLE_CALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.OutgoingCall: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallHandlerPlugin: java.util.Map getAvailableCallHandlers(android.content.Context)&gt;"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.HANDLE_CALL&quot;)"/>  
        <node method="CallHandlerPlugin getAvailableCallHandlers" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)&gt;(r2, 0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.hc.MainPrefs"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.warnings.WarningNoStun"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.warnings.WarningNoStun: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.warnings.WarningNoStun: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.csipsimple.ui.warnings.WarningNoStun"/>  
      <destinition name="com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACTION_SIP_REQUEST_RESTART"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.warnings.WarningNoStun: void onClick(android.view.View)&gt;"/>  
        <node method="WarningNoStun onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="WarningNoStun onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACTION_SIP_REQUEST_RESTART&quot;)"/>  
        <node method="WarningNoStun onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.service.SipService"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.service.SipService$FinalizeDestroyRunnable: void doRun()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.service.SipService$FinalizeDestroyRunnable: void doRun()&gt;,&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;,&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;,&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;,&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;,void quit(), &lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;"/>  
      <source name="com.csipsimple.service.SipService"/>  
      <sender action="com.csipsimple.PJ_TIMER" data="timer://"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.service.SipService$FinalizeDestroyRunnable: void doRun()&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipService: boolean stopSipStack()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: boolean sipStop()&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.PjSipService: void cleanPjsua()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void destroy()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.TimerWrapper: void quit()&gt;"/>  
        <node method="TimerWrapper quit" type="ReceiveIntentFromRetValue" unit="$r10 = specialinvoke r0.&lt;com.csipsimple.utils.TimerWrapper: android.app.PendingIntent getPendingIntentForTimer(int)&gt;($i0)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.PJ_TIMER&quot;)"/>  
        <node method="TimerWrapper getPendingIntentForTimer" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.prefs.CodecsFragment"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;,android.content.Intent getPriviledgedIntent(java.lang.String)"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;,void initialize(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;, &lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,boolean isPhone(android.content.Context), &lt;com.csipsimple.utils.PhoneCapabilityTester: void initialize(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <destinition name="interICC_android.intent.action.CALL_PRIVILEGED, "/>  
      <sender action="android.intent.action.CALL_PRIVILEGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="PhoneCapabilityTester initialize" type="ReceiveIntentFromRetValue" unit="$r3 = staticinvoke &lt;com.csipsimple.utils.PhoneCapabilityTester: android.content.Intent getPriviledgedIntent(java.lang.String)&gt;(&quot;123&quot;)"/>  
        <node method="PhoneCapabilityTester initialize" type="PassOutIntent" unit="$r6 = virtualinvoke $r5.&lt;android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)&gt;($r3, 65536)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.CALL_PRIVILEGED&quot;)"/>  
        <node method="PhoneCapabilityTester getPriviledgedIntent" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;, &lt;com.csipsimple.utils.Compatibility: boolean shouldUsePriviledgedIntegration(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int), &lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;,&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;,&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;,&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;,java.util.List getPossibleActivities(android.content.Context,android.content.Intent)"/>  
      <source name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.CodecsFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: void &lt;init&gt;(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PreferencesWrapper: java.lang.Integer needUpgrade()&gt;"/>  
        <node method="&lt;com.csipsimple.utils.Compatibility: void updateVersion(com.csipsimple.utils.PreferencesWrapper,int,int)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: boolean isPhone(android.content.Context)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.PhoneCapabilityTester: java.util.List getPossibleActivities(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PhoneCapabilityTester getPossibleActivities" type="PassOutIntent" unit="$r4 = virtualinvoke $r3.&lt;android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)&gt;($r1, 65600)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.db.DBProvider"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)&gt;,&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;,void broadcastRegistrationChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider"/>  
      <sender action="com.csipsimple.service.REGISTRATION_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)&gt;"/>  
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastRegistrationChange(long)&gt;"/>  
        <node method="DBProvider broadcastRegistrationChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastRegistrationChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.REGISTRATION_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastRegistrationChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r1, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.db.DBProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.db.DBProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)&gt;,&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;,void broadcastAccountChange(long)"/>  
      <source name="com.csipsimple.db.DBProvider"/>  
      <destinition name="com.csipsimple.widgets.AccountWidgetProvider, com.csipsimple.service.receiver.DynamicReceiver5"/>  
      <sender action="com.csipsimple.service.ACCOUNT_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.db.DBProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)&gt;"/>  
        <node method="&lt;com.csipsimple.db.DBProvider: void broadcastAccountChange(long)&gt;"/>  
        <node method="DBProvider broadcastAccountChange" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="DBProvider broadcastAccountChange" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.ACCOUNT_CHANGED&quot;)"/>  
        <node method="DBProvider broadcastAccountChange" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.pjsip.UAStateReceiver"> 
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;,&lt;com.csipsimple.service.SipNotifications: void showNotificationForMissedCall(android.content.ContentValues)&gt;,void showNotificationForMissedCall(android.content.ContentValues)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.SipHome"/>  
      <sender action="com.csipsimple.phone.action.CALLLOG" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForMissedCall(android.content.ContentValues)&gt;"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.CALLLOG&quot;)"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="SipNotifications showNotificationForMissedCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void access$6(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;,void onBroadcastCallState(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_com.csipsimple.service.CALL_CHANGED, "/>  
      <sender action="com.csipsimple.service.CALL_CHANGED"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$6(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void onBroadcastCallState(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.service.CALL_CHANGED&quot;)"/>  
        <node method="UAStateReceiver onBroadcastCallState" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r2, &quot;android.permission.USE_SIP&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;,&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;,void showNotificationForCall(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
        <node method="&lt;com.csipsimple.service.SipNotifications: void showNotificationForCall(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="SipNotifications showNotificationForCall" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SipNotifications showNotificationForCall" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="SipNotifications showNotificationForCall" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="SipNotifications showNotificationForCall" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;,&lt;com.csipsimple.utils.CallLogHelper: void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)&gt;,void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_de.ub0r.android.callmeter.SAVE_SIPCALL, "/>  
      <sender action="de.ub0r.android.callmeter.SAVE_SIPCALL"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
        <node method="&lt;com.csipsimple.utils.CallLogHelper: void addCallLog(android.content.Context,android.content.ContentValues,android.content.ContentValues)&gt;"/>  
        <node method="CallLogHelper addCallLog" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="CallLogHelper addCallLog" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;de.ub0r.android.callmeter.SAVE_SIPCALL&quot;)"/>  
        <node method="CallLogHelper addCallLog" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void sendBroadcast(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void access$2(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;,void launchCallHandler(com.csipsimple.api.SipCallSession)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="com.csipsimple.ui.incall.InCallActivity"/>  
      <sender action="com.csipsimple.phone.action.INCALL" flags="FLAG_ACTIVITY_NEW_TASK FLAG_ACTIVITY_SINGLE_TOP "/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$2(com.csipsimple.pjsip.UAStateReceiver,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void launchCallHandler(com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="UAStateReceiver launchCallHandler" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.csipsimple.phone.action.INCALL&quot;)"/>  
        <node method="UAStateReceiver launchCallHandler" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(805306368)"/>  
        <node method="UAStateReceiver launchCallHandler" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.csipsimple.service.SipService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void access$3(com.csipsimple.pjsip.UAStateReceiver,java.lang.String,java.lang.String)&gt;,&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;,void broadCastAndroidCallState(java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.pjsip.UAStateReceiver"/>  
      <destinition name="interICC_android.intent.action.PHONE_STATE, "/>  
      <sender action="android.intent.action.PHONE_STATE"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver$WorkerHandler: void handleMessage(android.os.Message)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void access$3(com.csipsimple.pjsip.UAStateReceiver,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.csipsimple.pjsip.UAStateReceiver: void broadCastAndroidCallState(java.lang.String,java.lang.String)&gt;"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.PHONE_STATE&quot;)"/>  
        <node method="UAStateReceiver broadCastAndroidCallState" type="PassOutIntent" unit="virtualinvoke $r5.&lt;com.csipsimple.service.SipService: void sendBroadcast(android.content.Intent,java.lang.String)&gt;(r3, &quot;android.permission.READ_PHONE_STATE&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.actionbarsherlock.widget.ActivityChooserView"> 
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromRetValue" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i1)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromRetValue" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i1)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromRetValue" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i1)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r8)"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromRetValue" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i1)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r8)"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;,&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;,void sortActivities()"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()&gt;"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel sortActivities" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromRetValue" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i1)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r8)"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;"/>  
      <source name="com.actionbarsherlock.widget.ActivityChooserView"/>  
      <destinition name="java.lang.String"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromRetValue" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)&gt;($i1)"/>  
        <node method="ActivityChooserModel chooseActivity" type="CreateMethod" unit="r11 = new android.content.Intent"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="ActivityChooserModel chooseActivity" type="SetAttribute" unit="virtualinvoke r11.&lt;android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)&gt;(r2)"/>  
        <node method="ActivityChooserView$Callbacks onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.csipsimple.ui.SipHome$TabsAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;,void clearDetails()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="getFragment" unit="$r3 = virtualinvoke $r2.&lt;com.csipsimple.ui.SipHome: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="beginTransaction" unit="$r4 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="replaceFunction" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r1, null)"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)&gt;,void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarWrapper"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)&gt;"/>  
        <node method="ActionBarWrapper$TabWrapper onTabReselected" type="getFragment" unit="$r8 = virtualinvoke $r7.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarWrapper$TabWrapper onTabReselected" type="beginTransaction" unit="r4 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarWrapper$TabWrapper onTabReselected" type="commit" unit="virtualinvoke r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.prefs.hc.MainPrefs"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;,void onBuildHeaders(java.util.List)"/>  
      <source name="com.csipsimple.ui.prefs.hc.MainPrefs"/>  
      <destinition name="com.csipsimple.ui.prefs.hc.PrefsLoaderFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void onBuildHeaders(java.util.List)&gt;"/>  
        <node method="MainPrefs onBuildHeaders" type="LoadFunction" unit="virtualinvoke r0.&lt;com.csipsimple.ui.prefs.hc.MainPrefs: void loadHeadersFromResource(int,java.util.List)&gt;(2131034115, r1)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;,void showDialpad(int)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.DtmfDialogFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;"/>  
        <node method="InCallActivity showDialpad" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="InCallActivity showDialpad" type="dialogShow" unit="virtualinvoke $r1.&lt;com.csipsimple.ui.incall.DtmfDialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r2, &quot;dialog&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;,void onVisibilityChanged(boolean)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerAutocompleteDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="DialerFragment onVisibilityChanged" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r3, &quot;autocomplete_dial_side_frag&quot;)"/>  
        <node method="DialerFragment onVisibilityChanged" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome$TabsAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;,void clearDetails()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="getFragment" unit="$r3 = virtualinvoke $r2.&lt;com.csipsimple.ui.SipHome: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="beginTransaction" unit="$r4 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="replaceFunction" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r1, null)"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome$TabsAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void &lt;init&gt;(com.csipsimple.ui.SipHome,android.support.v4.app.FragmentActivity,com.actionbarsherlock.app.ActionBar,android.support.v4.view.ViewPager)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void &lt;init&gt;(com.csipsimple.ui.SipHome,android.support.v4.app.FragmentActivity,com.actionbarsherlock.app.ActionBar,android.support.v4.view.ViewPager)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;,void clearDetails()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void &lt;init&gt;(com.csipsimple.ui.SipHome,android.support.v4.app.FragmentActivity,com.actionbarsherlock.app.ActionBar,android.support.v4.view.ViewPager)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="getFragment" unit="$r3 = virtualinvoke $r2.&lt;com.csipsimple.ui.SipHome: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="beginTransaction" unit="$r4 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="replaceFunction" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r1, null)"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment$5$1"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.account.AccountsChooserListActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.account.AccountsChooserListActivity"/>  
      <destinition name="com.csipsimple.ui.account.AccountsChooserListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsChooserListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void setContentView(int)&gt;(2130903064)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.prefs.PrefsFilters"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.PrefsFilters"/>  
      <destinition name="com.csipsimple.ui.account.AccountsChooserListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.PrefsFilters: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsChooserListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void setContentView(int)&gt;(2130903064)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.calllog.CallLogDetailsActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogDetailsActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogDetailsActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.calllog.CallLogDetailsActivity"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogDetailsActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="CallLogDetailsActivity onCreate" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogDetailsActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="CallLogDetailsActivity onCreate" type="beginTransaction" unit="$r5 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogDetailsActivity onCreate" type="addFunction" unit="$r5 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment)&gt;(16908290, r2)"/>  
        <node method="CallLogDetailsActivity onCreate" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;,void showDialpad(int)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.DtmfDialogFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;"/>  
        <node method="InCallActivity showDialpad" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="InCallActivity showDialpad" type="dialogShow" unit="virtualinvoke $r1.&lt;com.csipsimple.ui.incall.DtmfDialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r2, &quot;dialog&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.incall.InCallActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;,&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;,void showDialpad(int)"/>  
      <source name="com.csipsimple.ui.incall.InCallActivity"/>  
      <destinition name="com.csipsimple.ui.incall.DtmfDialogFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onLeftRightChoice(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void onTrigger(int,com.csipsimple.api.SipCallSession)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.incall.InCallActivity: void showDialpad(int)&gt;"/>  
        <node method="InCallActivity showDialpad" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.csipsimple.ui.incall.InCallActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="InCallActivity showDialpad" type="dialogShow" unit="virtualinvoke $r1.&lt;com.csipsimple.ui.incall.DtmfDialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r2, &quot;dialog&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;,void refreshWarningTabDisplay()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.warnings.WarningFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;"/>  
        <node method="SipHome refreshWarningTabDisplay" type="AddTab" unit="virtualinvoke $r5.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r9, class &quot;Lcom/csipsimple/ui/warnings/WarningFragment;&quot;, 4)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment$2"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$2: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment$1"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$1: void onClick(android.view.View)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void access$0(com.csipsimple.ui.messages.ConversationsListFragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onClickAddMessage()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeAllTabs()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeAllTabs()&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeAllTabs()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="CallLogListFragment viewDetails" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment$2$1"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="CallLogListFragment viewDetails" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment$2"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="CallLogListFragment viewDetails" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="CallLogListFragment viewDetails" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment$5"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="CallLogListFragment viewDetails" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;,void onVisibilityChanged(boolean)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerAutocompleteDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onAttachFragment(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="DialerFragment onVisibilityChanged" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r3, &quot;autocomplete_dial_side_frag&quot;)"/>  
        <node method="DialerFragment onVisibilityChanged" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.filters.AccountFilters"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.filters.AccountFilters: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.filters.AccountFilters: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.filters.AccountFilters"/>  
      <destinition name="com.csipsimple.ui.filters.AccountFiltersListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.filters.AccountFilters: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountFilters onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.filters.AccountFilters: void setContentView(int)&gt;(2130903061)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void access$0(com.csipsimple.ui.SipHome)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void access$0(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;,void refreshWarningTabDisplay()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.warnings.WarningFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void access$0(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;"/>  
        <node method="SipHome refreshWarningTabDisplay" type="AddTab" unit="virtualinvoke $r5.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r9, class &quot;Lcom/csipsimple/ui/warnings/WarningFragment;&quot;, 4)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome$1"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$1: void run()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$1: void run()&gt;,&lt;com.csipsimple.ui.SipHome: void access$0(com.csipsimple.ui.SipHome)&gt;,&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;,void refreshWarningTabDisplay()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.warnings.WarningFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void access$0(com.csipsimple.ui.SipHome)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome: void refreshWarningTabDisplay()&gt;"/>  
        <node method="SipHome refreshWarningTabDisplay" type="AddTab" unit="virtualinvoke $r5.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r9, class &quot;Lcom/csipsimple/ui/warnings/WarningFragment;&quot;, 4)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;,void onVisibilityChanged(boolean)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerAutocompleteDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="DialerFragment onVisibilityChanged" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r3, &quot;autocomplete_dial_side_frag&quot;)"/>  
        <node method="DialerFragment onVisibilityChanged" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;,void onVisibilityChanged(boolean)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerAutocompleteDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="DialerFragment onVisibilityChanged" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r3, &quot;autocomplete_dial_side_frag&quot;)"/>  
        <node method="DialerFragment onVisibilityChanged" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.dialpad.DialerFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;,&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;,void onVisibilityChanged(boolean)"/>  
      <source name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerAutocompleteDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void initButtons(android.view.View)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void attachButtonListener(android.view.View,int,boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.dialpad.DialerFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="DialerFragment onVisibilityChanged" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.dialpad.DialerFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DialerFragment onVisibilityChanged" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r3, &quot;autocomplete_dial_side_frag&quot;)"/>  
        <node method="DialerFragment onVisibilityChanged" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.MessageActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.MessageActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.MessageActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.messages.MessageActivity"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.MessageActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MessageActivity onCreate" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.MessageActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="MessageActivity onCreate" type="beginTransaction" unit="$r5 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MessageActivity onCreate" type="addFunction" unit="$r5 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment)&gt;(16908290, r2)"/>  
        <node method="MessageActivity onCreate" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,com.csipsimple.ui.messages.ConverstationsAdapter$ConversationListItemViews)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.prefs.Codecs"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r7, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r8, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r7, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r7, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r7, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r8, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r7, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r7, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.prefs.Codecs"/>  
      <destinition name="com.csipsimple.ui.prefs.CodecsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.prefs.Codecs: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Codecs onCreate" type="AddTab" unit="virtualinvoke r2.&lt;com.csipsimple.ui.prefs.Codecs$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class)&gt;($r8, class &quot;Lcom/csipsimple/ui/prefs/CodecsFragment;&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void select()&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void select()&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void select()&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.messages.ConversationsListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onActivityCreated(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;,&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;,void viewDetails(int,java.lang.String,java.lang.String)"/>  
      <source name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <destinition name="com.csipsimple.ui.messages.MessageFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onActivityCreated(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment$5$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.messages.ConversationsListFragment: void viewDetails(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="ConversationsListFragment viewDetails" type="getFragment" unit="$r6 = virtualinvoke r0.&lt;com.csipsimple.ui.messages.ConversationsListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="beginTransaction" unit="$r7 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ConversationsListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="ConversationsListFragment viewDetails" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.widgets.AccountWidgetConfigure"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.widgets.AccountWidgetConfigure"/>  
      <destinition name="com.csipsimple.ui.account.AccountsChooserListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.widgets.AccountWidgetConfigure: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsChooserListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsChooserListActivity: void setContentView(int)&gt;(2130903064)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.help.Help"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.ui.help.Faq"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="Help onItemClick" type="getFragment" unit="$r14 = virtualinvoke r0.&lt;com.csipsimple.ui.help.Help: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Help onItemClick" type="dialogShow" unit="virtualinvoke $r13.&lt;com.actionbarsherlock.app.SherlockDialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r14, &quot;faq&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long)"/>  
      <source name="com.csipsimple.ui.help.Help"/>  
      <destinition name="com.csipsimple.ui.help.Legal"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.help.Help: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="Help onItemClick" type="getFragment" unit="$r14 = virtualinvoke r0.&lt;com.csipsimple.ui.help.Help: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Help onItemClick" type="dialogShow" unit="virtualinvoke $r15.&lt;com.actionbarsherlock.app.SherlockDialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r14, &quot;issues&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.account.AccountsEditList"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.account.AccountsEditList: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.account.AccountsEditList: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.account.AccountsEditList"/>  
      <destinition name="com.csipsimple.ui.account.AccountsEditListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.account.AccountsEditList: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountsEditList onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.account.AccountsEditList: void setContentView(int)&gt;(2130903067)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;,boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.help.Help"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)&gt;"/>  
        <node method="SipHome onOptionsItemSelected" type="getFragment" unit="$r12 = virtualinvoke r0.&lt;com.csipsimple.ui.SipHome: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="SipHome onOptionsItemSelected" type="dialogShow" unit="virtualinvoke $r11.&lt;android.support.v4.app.DialogFragment: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r12, &quot;dialog&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome$TabsAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onPageScrollStateChanged(int)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onPageScrollStateChanged(int)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;,void clearDetails()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onPageScrollStateChanged(int)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="getFragment" unit="$r3 = virtualinvoke $r2.&lt;com.csipsimple.ui.SipHome: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="beginTransaction" unit="$r4 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="replaceFunction" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r1, null)"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.actionbarsherlock.internal.app.ActionBarImpl"> 
    <FragmentSummary> 
      <method value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)&gt;"/>  
      <methodtrace value="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)&gt;,&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;,void selectTab(com.actionbarsherlock.app.ActionBar$Tab)"/>  
      <source name="com.actionbarsherlock.internal.app.ActionBarImpl"/>  
      <nodes> 
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)&gt;"/>  
        <node method="&lt;com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)&gt;"/>  
        <node method="ActionBarImpl selectTab" type="getFragment" unit="$r5 = virtualinvoke $r4.&lt;com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="beginTransaction" unit="r2 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ActionBarImpl selectTab" type="commit" unit="virtualinvoke r2.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.calllog.CallLogListFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void fetchCalls()&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void fetchCalls()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;,&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;,void viewDetails(int,long[])"/>  
      <source name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogDetailsFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void fetchCalls()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void onVisibilityChanged(boolean)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment$2$1: void run()&gt;"/>  
        <node method="&lt;com.csipsimple.ui.calllog.CallLogListFragment: void viewDetails(int,long[])&gt;"/>  
        <node method="CallLogListFragment viewDetails" type="getFragment" unit="$r7 = virtualinvoke r0.&lt;com.csipsimple.ui.calllog.CallLogListFragment: android.support.v4.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="beginTransaction" unit="$r8 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CallLogListFragment viewDetails" type="replaceFunction" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, r3, null)"/>  
        <node method="CallLogListFragment viewDetails" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.SipHome"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r4, class &quot;Lcom/csipsimple/ui/dialpad/DialerFragment;&quot;, 0)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.messages.ConversationsListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;(r7, class &quot;Lcom/csipsimple/ui/messages/ConversationsListFragment;&quot;, 3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.favorites.FavListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r6, class &quot;Lcom/csipsimple/ui/favorites/FavListFragment;&quot;, 2)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r5, class &quot;Lcom/csipsimple/ui/calllog/CallLogListFragment;&quot;, 1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.calllog.CallLogListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r5, class &quot;Lcom/csipsimple/ui/calllog/CallLogListFragment;&quot;, 1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.favorites.FavListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r6, class &quot;Lcom/csipsimple/ui/favorites/FavListFragment;&quot;, 2)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void &lt;init&gt;(com.csipsimple.ui.SipHome,android.support.v4.app.FragmentActivity,com.actionbarsherlock.app.ActionBar,android.support.v4.view.ViewPager)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;,&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;,void clearDetails()"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void &lt;init&gt;(com.csipsimple.ui.SipHome,android.support.v4.app.FragmentActivity,com.actionbarsherlock.app.ActionBar,android.support.v4.view.ViewPager)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)&gt;"/>  
        <node method="&lt;com.csipsimple.ui.SipHome$TabsAdapter: void clearDetails()&gt;"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="getFragment" unit="$r3 = virtualinvoke $r2.&lt;com.csipsimple.ui.SipHome: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="beginTransaction" unit="$r4 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="replaceFunction" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131099882, $r1, null)"/>  
        <node method="SipHome$TabsAdapter clearDetails" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.SipHome"/>  
      <destinition name="com.csipsimple.ui.dialpad.DialerFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.SipHome: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SipHome onCreate" type="AddTab" unit="virtualinvoke $r15.&lt;com.csipsimple.ui.SipHome$TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,int)&gt;($r4, class &quot;Lcom/csipsimple/ui/dialpad/DialerFragment;&quot;, 0)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"> 
    <FragmentSummary> 
      <method value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.csipsimple.ui.outgoingcall.OutgoingCallChooser"/>  
      <destinition name="com.csipsimple.ui.outgoingcall.OutgoingCallListFragment"/>  
      <nodes> 
        <node method="&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="OutgoingCallChooser onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.csipsimple.ui.outgoingcall.OutgoingCallChooser: void setContentView(int)&gt;(2130903111)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
</root>
