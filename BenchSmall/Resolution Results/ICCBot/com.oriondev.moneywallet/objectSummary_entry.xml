<?xml version="1.0" encoding="UTF-8"?>

<root> 
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.BudgetMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BudgetMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BudgetMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.BudgetMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BudgetMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="BudgetMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="BudgetMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditBudgetActivity;&quot;)"/>  
        <node method="BudgetMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BudgetMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="DatabaseSettingFragment$1 onPreferenceClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DatabaseSettingFragment$1 onPreferenceClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/BackupListActivity;&quot;)"/>  
        <node method="DatabaseSettingFragment$1 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
        <node method="AboutFragment$3 onClick" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="AboutFragment$3 onClick" type="SetAttribute" unit="virtualinvoke $r6.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1207959552)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
        <node method="AboutFragment$3 onClick" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="AboutFragment$3 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
        <node method="AboutFragment$3 onClick" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="AboutFragment$3 onClick" type="SetAttribute" unit="virtualinvoke $r6.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1207959552)"/>  
        <node method="AboutFragment$3 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
        <node method="AboutFragment$3 onClick" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="AboutFragment$3 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$3: void onClick()&gt;"/>  
        <node method="AboutFragment$3 onClick" type="CreateMethod" unit="$r6 = new android.content.Intent"/>  
        <node method="AboutFragment$3 onClick" type="SetAttribute" unit="virtualinvoke $r6.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1207959552)"/>  
        <node method="AboutFragment$3 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelEditClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelEditClick(long)&gt;,void onModelEditClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelEditClick(long)&gt;"/>  
        <node method="TransferModelListFragment onModelEditClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransferModelListFragment onModelEditClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferActivity;&quot;)"/>  
        <node method="TransferModelListFragment onModelEditClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="interICC_android.intent.action.GET_CONTENT, "/>  
      <sender action="android.intent.action.GET_CONTENT" type="file/*"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;"/>  
        <node method="AttachmentPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.GET_CONTENT&quot;)"/>  
        <node method="AttachmentPicker showPicker" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;file/*&quot;)"/>  
        <node method="AttachmentPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 36347)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;,android.content.Intent disableLock(android.app.Activity)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;"/>  
        <node method="LockActivity disableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity disableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;,void notifyTaskFinished(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onHeaderClick(java.util.Date,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onHeaderClick(java.util.Date,java.util.Date)&gt;,void onHeaderClick(java.util.Date,java.util.Date)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.PeriodDetailActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onHeaderClick(java.util.Date,java.util.Date)&gt;"/>  
        <node method="TransactionListFragment onHeaderClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransactionListFragment onHeaderClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/PeriodDetailActivity;&quot;)"/>  
        <node method="TransactionListFragment onHeaderClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.SinglePanelAppBarActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelAppBarActivity: void onInflateRootLayout()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelAppBarActivity: void onInflateRootLayout()&gt;,void onInflateRootLayout()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.SinglePanelAppBarActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelAppBarActivity: void onInflateRootLayout()&gt;"/>  
        <node method="SinglePanelAppBarActivity onInflateRootLayout" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelAppBarActivity: void setContentView(int)&gt;(2131427360)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="interICC_android.intent.action.GET_CONTENT, "/>  
      <sender action="android.intent.action.GET_CONTENT" type="file/*"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;"/>  
        <node method="AttachmentPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.GET_CONTENT&quot;)"/>  
        <node method="AttachmentPicker showPicker" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;file/*&quot;)"/>  
        <node method="AttachmentPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 36347)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)&gt;,void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <sender action="LocalBroadCast::AttachmentOperationStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)&gt;"/>  
        <node method="AttachmentHandlerIntentService notifyOperationStarted" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="AttachmentHandlerIntentService notifyOperationStarted" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::AttachmentOperationStarted&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: void onRecurrentTransactionClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: void onRecurrentTransactionClick(long)&gt;,void onRecurrentTransactionClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: void onRecurrentTransactionClick(long)&gt;"/>  
        <node method="RecurrentTransactionListFragment onRecurrentTransactionClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RecurrentTransactionListFragment onRecurrentTransactionClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onPayClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onPayClick(long)&gt;,void onPayClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onPayClick(long)&gt;"/>  
        <node method="DebtListFragment onPayClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="DebtListFragment onPayClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="DebtListFragment onPayClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;,android.content.Intent changeKey(android.app.Activity)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;"/>  
        <node method="LockActivity changeKey" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeKey" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onReceiveClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onReceiveClick(long)&gt;,void onReceiveClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onReceiveClick(long)&gt;"/>  
        <node method="DebtListFragment onReceiveClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="DebtListFragment onReceiveClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="DebtListFragment onReceiveClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdrawEverything(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdrawEverything(long)&gt;,void onWithdrawEverything(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdrawEverything(long)&gt;"/>  
        <node method="SavingListFragment onWithdrawEverything" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SavingListFragment onWithdrawEverything" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="SavingListFragment onWithdrawEverything" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdraw(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdraw(long)&gt;,void onWithdraw(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdraw(long)&gt;"/>  
        <node method="SavingListFragment onWithdraw" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SavingListFragment onWithdraw" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="SavingListFragment onWithdraw" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onDeposit(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onDeposit(long)&gt;,void onDeposit(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onDeposit(long)&gt;"/>  
        <node method="SavingListFragment onDeposit" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SavingListFragment onDeposit" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="SavingListFragment onDeposit" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: void onCategoryClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: void onCategoryClick(long)&gt;,void onCategoryClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: void onCategoryClick(long)&gt;"/>  
        <node method="CategoryListFragment onCategoryClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryListFragment onCategoryClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$3 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$3 onClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$3 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$3 onClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$3 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.CurrencyPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.picker.CurrencyPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CurrencyListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;"/>  
        <node method="CurrencyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CurrencyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CurrencyListActivity;&quot;)"/>  
        <node method="CurrencyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 56)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelClick(long)&gt;,void onModelClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelClick(long)&gt;"/>  
        <node method="TransferModelListFragment onModelClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransferModelListFragment onModelClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.IconListActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.IconListActivity: void onIconClick(com.oriondev.moneywallet.model.Icon)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.IconListActivity: void onIconClick(com.oriondev.moneywallet.model.Icon)&gt;,void onIconClick(com.oriondev.moneywallet.model.Icon)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.IconListActivity: void onIconClick(com.oriondev.moneywallet.model.Icon)&gt;"/>  
        <node method="IconListActivity onIconClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="UtilitySettingFragment$3 onPreferenceClick" type="ReceiveIntentFromRetValue" unit="$r5 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;($r4)"/>  
        <node method="LockActivity changeKey" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeKey" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$3 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;,void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onTransactionClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onTransactionClick(long)&gt;,void onTransactionClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onTransactionClick(long)&gt;"/>  
        <node method="TransactionListFragment onTransactionClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransactionListFragment onTransactionClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;,android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
        <node method="LockActivity enableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity enableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$2: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <sender action="android.intent.action.VIEW" data="new android.net.Uri"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$2: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$2 onClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$2 onClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="ConvenienceBuilder$2 onClick" type="SetAttribute" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$2: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" data="new android.net.Uri"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$2: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$2 onClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$2 onClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="ConvenienceBuilder$2 onClick" type="SetAttribute" unit="virtualinvoke $r3.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="ConvenienceBuilder$2 onClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.WalletMultiPanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.WalletMultiPanelFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.WalletMultiPanelFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.WalletMultiPanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.WalletMultiPanelFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="WalletMultiPanelFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="WalletMultiPanelFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="WalletMultiPanelFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.WalletMultiPanelFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;,void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.PeriodDetailActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;"/>  
        <node method="OverviewSinglePanelFragment onPeriodClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="OverviewSinglePanelFragment onPeriodClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/PeriodDetailActivity;&quot;)"/>  
        <node method="OverviewSinglePanelFragment onPeriodClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.CategoryPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.picker.CategoryPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.EventListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: void onEventClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: void onEventClick(long)&gt;,void onEventClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.EventListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: void onEventClick(long)&gt;"/>  
        <node method="EventListFragment onEventClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="EventListFragment onEventClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;,void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyUploadTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyUploadTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCategoryClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCategoryClick(long)&gt;,void onCategoryClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCategoryClick(long)&gt;"/>  
        <node method="PeriodDetailFlowFragment onCategoryClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PeriodDetailFlowFragment onCategoryClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="PeriodDetailFlowFragment onCategoryClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$2: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="LauncherActivity$2 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="LauncherActivity$2 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/BackupListActivity;&quot;)"/>  
        <node method="LauncherActivity$2 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 273)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$4 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$4 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$4 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 onClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceStarted()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceStarted()&gt;,void notifyServiceStarted()"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <sender action="LocalBroadCast::LegacyEditionUpgradeStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceStarted()&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::LegacyEditionUpgradeStarted&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$6 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$6 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;,android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
        <node method="LockActivity changeMode" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeMode" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$5 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void onClick()&gt;,void onClick()"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void onClick()&gt;"/>  
        <node method="ConvenienceBuilder$5 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 onClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="ParentCategoryPickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="ParentCategoryPickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditCategoryActivity;&quot;)"/>  
        <node method="ParentCategoryPickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;,void notifyListTaskFinished(java.util.ArrayList)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyListTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyListTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$3: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$3: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CurrencyListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$3: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;"/>  
        <node method="CurrencyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CurrencyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CurrencyListActivity;&quot;)"/>  
        <node method="CurrencyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 56)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="PlacePickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="PlacePickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPlaceActivity;&quot;)"/>  
        <node method="PlacePickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="WalletPickerDialog$2 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="WalletPickerDialog$2 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="WalletPickerDialog$2 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelEditClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelEditClick(long)&gt;,void onModelEditClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelEditClick(long)&gt;"/>  
        <node method="TransactionModelListFragment onModelEditClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransactionModelListFragment onModelEditClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="TransactionModelListFragment onModelEditClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: void onTransferClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: void onTransferClick(long)&gt;,void onTransferClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: void onTransferClick(long)&gt;"/>  
        <node method="TransferListFragment onTransferClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransferListFragment onTransferClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="EventPickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="EventPickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditEventActivity;&quot;)"/>  
        <node method="EventPickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.SinglePanelScrollActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelScrollActivity: void onInflateRootLayout()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelScrollActivity: void onInflateRootLayout()&gt;,void onInflateRootLayout()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.SinglePanelScrollActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelScrollActivity: void onInflateRootLayout()&gt;"/>  
        <node method="SinglePanelScrollActivity onInflateRootLayout" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelScrollActivity: void setContentView(int)&gt;(2131427361)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.EventMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.EventMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.EventMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.EventMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.EventMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="EventMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="EventMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditEventActivity;&quot;)"/>  
        <node method="EventMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.EventMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.BaseActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.BaseActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="BaseActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MapActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onInfoWindowClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onInfoWindowClick(long)&gt;,void onInfoWindowClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MapActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onInfoWindowClick(long)&gt;"/>  
        <node method="MapActivity onInfoWindowClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MapActivity onInfoWindowClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="MapActivity onInfoWindowClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;,void startMainActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;"/>  
        <node method="LauncherActivity startMainActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="LauncherActivity startMainActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/MainActivity;&quot;)"/>  
        <node method="LauncherActivity startMainActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.LocalFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.LocalFile)&gt;,void loadFolder(com.oriondev.moneywallet.model.LocalFile)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.LocalFile)&gt;"/>  
        <node method="ExternalMemoryBackupHandlerFragment loadFolder" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ExternalMemoryBackupHandlerFragment loadFolder" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/service/disk/DiskBackupHandlerIntentService;&quot;)"/>  
        <node method="ExternalMemoryBackupHandlerFragment loadFolder" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TutorialActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="LauncherActivity$1 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="LauncherActivity$1 onClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TutorialActivity;&quot;)"/>  
        <node method="LauncherActivity$1 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 273)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onDebtClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onDebtClick(long)&gt;,void onDebtClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onDebtClick(long)&gt;"/>  
        <node method="DebtListFragment onDebtClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="DebtListFragment onDebtClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SavingMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SavingMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SavingMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SavingMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SavingMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="SavingMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SavingMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditSavingActivity;&quot;)"/>  
        <node method="SavingMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SavingMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;,void onInflateRootLayout()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;"/>  
        <node method="SinglePanelActivity onInflateRootLayout" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void setContentView(int)&gt;(2131427359)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="WalletPickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="WalletPickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="WalletPickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.osmdroid.tileprovider.util.SimpleRegisterReceiver"> 
    <intentSummary> 
      <method value="&lt;org.osmdroid.tileprovider.util.SimpleRegisterReceiver: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)&gt;"/>  
      <methodtrace value="&lt;org.osmdroid.tileprovider.util.SimpleRegisterReceiver: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)&gt;,android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)"/>  
      <source name="org.osmdroid.tileprovider.util.SimpleRegisterReceiver"/>  
      <nodes> 
        <node method="&lt;org.osmdroid.tileprovider.util.SimpleRegisterReceiver: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)&gt;"/>  
        <node method="SimpleRegisterReceiver registerReceiver" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.IntentFilter"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.MapActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="PlaceMultiPanelFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="PlaceMultiPanelFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/MapActivity;&quot;)"/>  
        <node method="PlaceMultiPanelFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent unlock(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent unlock(android.app.Activity)&gt;,android.content.Intent unlock(android.app.Activity)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent unlock(android.app.Activity)&gt;"/>  
        <node method="LockActivity unlock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity unlock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.storage.preference.PreferenceManager"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;,void notifyCurrentWalletIsChanged(android.content.Context,long)"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <sender action="LocalBroadCast::CurrentWalletChanged"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::CurrentWalletChanged&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: void onBudgetClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: void onBudgetClick(long)&gt;,void onBudgetClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: void onBudgetClick(long)&gt;"/>  
        <node method="BudgetListFragment onBudgetClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="BudgetListFragment onBudgetClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelClick(long)&gt;,void onModelClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelClick(long)&gt;"/>  
        <node method="TransactionModelListFragment onModelClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransactionModelListFragment onModelClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;,void notifyTaskStarted(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceStarted&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.multidots.fingerprintauth.FingerPrintUtils"> 
    <intentSummary> 
      <method value="&lt;com.multidots.fingerprintauth.FingerPrintUtils: void openSecuritySettings(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.multidots.fingerprintauth.FingerPrintUtils: void openSecuritySettings(android.content.Context)&gt;,void openSecuritySettings(android.content.Context)"/>  
      <source name="com.multidots.fingerprintauth.FingerPrintUtils"/>  
      <destinition name="interICC_android.settings.SECURITY_SETTINGS, "/>  
      <sender action="android.settings.SECURITY_SETTINGS"/>  
      <nodes> 
        <node method="&lt;com.multidots.fingerprintauth.FingerPrintUtils: void openSecuritySettings(android.content.Context)&gt;"/>  
        <node method="FingerPrintUtils openSecuritySettings" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="FingerPrintUtils openSecuritySettings" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.settings.SECURITY_SETTINGS&quot;)"/>  
        <node method="FingerPrintUtils openSecuritySettings" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyListActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyListActivity: void onCurrencyClick(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyListActivity: void onCurrencyClick(java.lang.String)&gt;,void onCurrencyClick(java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyListActivity: void onCurrencyClick(java.lang.String)&gt;"/>  
        <node method="CurrencyListActivity onCurrencyClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;,void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;"/>  
        <node method="ExternalMemoryBackupHandlerFragment restoreBackup" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ExternalMemoryBackupHandlerFragment restoreBackup" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/service/disk/DiskBackupHandlerIntentService;&quot;)"/>  
        <node method="ExternalMemoryBackupHandlerFragment restoreBackup" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: void onRecurrentTransferClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: void onRecurrentTransferClick(long)&gt;,void onRecurrentTransferClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: void onRecurrentTransferClick(long)&gt;"/>  
        <node method="RecurrentTransferListFragment onRecurrentTransferClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RecurrentTransferListFragment onRecurrentTransferClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;,void notifyTaskProgress(int,int,int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceRunning"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceRunning&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;"/>  
        <node method="AboutFragment$6 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AboutFragment$6 onClick" type="PassOutIntent" unit="virtualinvoke $r1.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;"/>  
        <node method="AboutFragment$6 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$6: void onClick()&gt;"/>  
        <node method="AboutFragment$6 onClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFinished()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFinished()&gt;,void notifyServiceFinished()"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <sender action="LocalBroadCast::LegacyEditionUpgradeFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFinished()&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::LegacyEditionUpgradeFinished&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;,android.content.Intent buildIntent(android.app.Activity)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService"/>  
      <destinition name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/openexchangerates/OpenExchangeRatesCurrencyRateDownloadIntentService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalendarActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="TransactionMultiPanelViewPagerFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransactionMultiPanelViewPagerFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalendarActivity;&quot;)"/>  
        <node method="TransactionMultiPanelViewPagerFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.SearchActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="TransactionMultiPanelViewPagerFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransactionMultiPanelViewPagerFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/SearchActivity;&quot;)"/>  
        <node method="TransactionMultiPanelViewPagerFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.storage.preference.PreferenceManager"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;,&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;,void notifyCurrentWalletIsChanged(android.content.Context,long)"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <sender action="LocalBroadCast::CurrentWalletChanged"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::CurrentWalletChanged&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CurrencyListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;"/>  
        <node method="CurrencyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CurrencyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CurrencyListActivity;&quot;)"/>  
        <node method="CurrencyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 56)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)&gt;,void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <sender action="LocalBroadCast::AttachmentOperationFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)&gt;"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFinished" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFinished" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::AttachmentOperationFinished&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onSavingClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onSavingClick(long)&gt;,void onSavingClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onSavingClick(long)&gt;"/>  
        <node method="SavingListFragment onSavingClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SavingListFragment onSavingClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.MoneyPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.picker.MoneyPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="PeoplePickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="PeoplePickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPersonActivity;&quot;)"/>  
        <node method="PeoplePickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.IFile,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.IFile,java.lang.String)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;,void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.IFile,java.lang.String)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void restoreBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;"/>  
        <node method="ExternalMemoryBackupHandlerFragment restoreBackup" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ExternalMemoryBackupHandlerFragment restoreBackup" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/service/disk/DiskBackupHandlerIntentService;&quot;)"/>  
        <node method="ExternalMemoryBackupHandlerFragment restoreBackup" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;,void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;"/>  
        <node method="ExternalMemoryBackupHandlerFragment createBackup" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ExternalMemoryBackupHandlerFragment createBackup" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/service/disk/DiskBackupHandlerIntentService;&quot;)"/>  
        <node method="ExternalMemoryBackupHandlerFragment createBackup" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="PlaceMultiPanelFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PlaceMultiPanelFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPlaceActivity;&quot;)"/>  
        <node method="PlaceMultiPanelFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PlaceMultiPanelFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;,void notifyTaskFailure(int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFailed&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.CurrencyPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.picker.CurrencyPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="CurrencyPicker onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.model.Attachment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;,android.content.Intent getActionViewIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.model.Attachment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void sendBroadcastMessage()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void sendBroadcastMessage()&gt;,void sendBroadcastMessage()"/>  
      <source name="com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService"/>  
      <sender action="LocalBroadCast::ExchangeRatesUpdated"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void sendBroadcastMessage()&gt;"/>  
        <node method="AbstractCurrencyRateDownloadIntentService sendBroadcastMessage" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService sendBroadcastMessage" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ExchangeRatesUpdated&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)&gt;,void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <sender action="LocalBroadCast::AttachmentOperationFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)&gt;"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFailed" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFailed" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::AttachmentOperationFailed&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.PersonMultiPanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PersonMultiPanelFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PersonMultiPanelFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.PersonMultiPanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PersonMultiPanelFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="PersonMultiPanelFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PersonMultiPanelFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPersonActivity;&quot;)"/>  
        <node method="PersonMultiPanelFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.PersonMultiPanelFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.MoneyPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.picker.MoneyPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="MoneyPicker onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.SearchActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.SearchActivity: void onTransactionClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.SearchActivity: void onTransactionClick(long)&gt;,void onTransactionClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.SearchActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.SearchActivity: void onTransactionClick(long)&gt;"/>  
        <node method="SearchActivity onTransactionClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SearchActivity onTransactionClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="SearchActivity onTransactionClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.SearchActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.MapPlacePicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.picker.MapPlacePicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void showPicker()&gt;"/>  
        <node method="MapPlacePicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MapPlacePicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/PlacePickerActivity;&quot;)"/>  
        <node method="MapPlacePicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 132)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="LauncherActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;,void startMainActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;"/>  
        <node method="LauncherActivity startMainActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="LauncherActivity startMainActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/MainActivity;&quot;)"/>  
        <node method="LauncherActivity startMainActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFailed(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFailed(java.lang.String)&gt;,void notifyServiceFailed(java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <sender action="LocalBroadCast::LegacyEditionUpgradeFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFailed(java.lang.String)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFailed" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFailed" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::LegacyEditionUpgradeFailed&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.MapPlacePicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.picker.MapPlacePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="MapPlacePicker onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadProgress(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadProgress(int)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;,void notifyTaskProgress(int,int,int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceRunning"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadProgress(int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceRunning&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="interICC_android.intent.action.GET_CONTENT, "/>  
      <sender action="android.intent.action.GET_CONTENT" type="file/*"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void showPicker()&gt;"/>  
        <node method="AttachmentPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.GET_CONTENT&quot;)"/>  
        <node method="AttachmentPicker showPicker" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;file/*&quot;)"/>  
        <node method="AttachmentPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 36347)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;,void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;"/>  
        <node method="PeriodDetailSummaryFragment onPeriodClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PeriodDetailSummaryFragment onPeriodClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="PeriodDetailSummaryFragment onPeriodClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void access$100(com.oriondev.moneywallet.ui.activity.LauncherActivity)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void access$100(com.oriondev.moneywallet.ui.activity.LauncherActivity)&gt;,&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;,void startMainActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void access$100(com.oriondev.moneywallet.ui.activity.LauncherActivity)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;"/>  
        <node method="LauncherActivity startMainActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="LauncherActivity startMainActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/MainActivity;&quot;)"/>  
        <node method="LauncherActivity startMainActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;,void onLicenseClick(com.oriondev.moneywallet.model.License)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;,void onLicenseClick(com.oriondev.moneywallet.model.License)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;,void onLicenseClick(com.oriondev.moneywallet.model.License)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$7: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$7: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$7: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CurrencyListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void showPicker()&gt;"/>  
        <node method="CurrencyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CurrencyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CurrencyListActivity;&quot;)"/>  
        <node method="CurrencyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CurrencyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 56)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$7: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$7: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$7: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem), &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="CurrencyConverterActivity onMenuItemClick" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;(r0)"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/openexchangerates/OpenExchangeRatesCurrencyRateDownloadIntentService;&quot;)"/>  
        <node method="CurrencyConverterActivity onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog$3: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog$3: void onClick(android.view.View)&gt;,void onClick(android.view.View), &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog"/>  
      <destinition name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog$3: void onClick(android.view.View)&gt;"/>  
        <node method="CurrencyConverterDialog$3 onClick" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;($r3)"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/openexchangerates/OpenExchangeRatesCurrencyRateDownloadIntentService;&quot;)"/>  
        <node method="CurrencyConverterDialog$3 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onBackPressed()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onBackPressed()&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onBackPressed()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.LocalFile)&gt;,void loadFolder(com.oriondev.moneywallet.model.LocalFile)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void loadFolder(com.oriondev.moneywallet.model.LocalFile)&gt;"/>  
        <node method="ExternalMemoryBackupHandlerFragment loadFolder" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ExternalMemoryBackupHandlerFragment loadFolder" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/service/disk/DiskBackupHandlerIntentService;&quot;)"/>  
        <node method="ExternalMemoryBackupHandlerFragment loadFolder" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void showPicker()&gt;"/>  
        <node method="MapPlacePicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MapPlacePicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/PlacePickerActivity;&quot;)"/>  
        <node method="MapPlacePicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MapPlacePicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 132)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="IconPicker onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentDelete(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentDelete(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentDelete(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="DailyBroadcastReceiver onReceive" type="PassOutIntent" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver onReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver onReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="DailyBroadcastReceiver onReceive" type="PassOutIntent" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.NotificationCompat$Builder: android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="DailyBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyDownloadProgress(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyDownloadProgress(int)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;,void notifyTaskProgress(int,int,int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceRunning"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyDownloadProgress(int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceRunning&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.CategoryPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.picker.CategoryPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="CategoryPicker onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="OpenExchangeRatesCurrencyRateDownloadIntentService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="OpenExchangeRatesCurrencyRateDownloadIntentService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;,void scheduleDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;,void scheduleDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.CategoryMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.CategoryMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.CategoryMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.CategoryMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.CategoryMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="CategoryMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditCategoryActivity;&quot;)"/>  
        <node method="CategoryMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.CategoryMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$9: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$9: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$9: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.storage.preference.PreferenceManager"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;,void setCurrentDailyReminder(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.preference.PreferenceManager"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onBackPressed()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onBackPressed()&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onBackPressed()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="RecurrenceMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RecurrenceMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditRecurrentTransferActivity;&quot;)"/>  
        <node method="RecurrenceMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="RecurrenceMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RecurrenceMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditRecurrentTransactionActivity;&quot;)"/>  
        <node method="RecurrenceMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.RecurrenceMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.CategoryPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.picker.CategoryPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$4: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$4: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$4: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="ModelMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ModelMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferModelActivity;&quot;)"/>  
        <node method="ModelMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="ModelMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ModelMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionModelActivity;&quot;)"/>  
        <node method="ModelMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.ModelMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$4: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$4: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$4: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.TutorialActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onDonePressed(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onDonePressed(android.support.v4.app.Fragment)&gt;,void onDonePressed(android.support.v4.app.Fragment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.TutorialActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onDonePressed(android.support.v4.app.Fragment)&gt;"/>  
        <node method="TutorialActivity onDonePressed" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TutorialActivity onDonePressed" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="TutorialActivity onDonePressed" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 374)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentDelete(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentDelete(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentDelete(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void remove(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void onFloatingActionButtonClick()&gt;"/>  
        <node method="CategoryPickerActivity onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPickerActivity onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditCategoryActivity;&quot;)"/>  
        <node method="CategoryPickerActivity onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="DiskBackupHandlerIntentService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="DiskBackupHandlerIntentService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.afollestad.materialdialogs.MaterialDialog"> 
    <intentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.MaterialDialog: void setContentView(int)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.MaterialDialog: void setContentView(int)&gt;,void setContentView(int)"/>  
      <source name="com.afollestad.materialdialogs.MaterialDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.MaterialDialog: void setContentView(int)&gt;"/>  
        <node method="MaterialDialog setContentView" type="setContentView" unit="specialinvoke r0.&lt;com.afollestad.materialdialogs.DialogBase: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.IFile,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.IFile,java.lang.String)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;,void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.disk.DiskBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.IFile,java.lang.String)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.ExternalMemoryBackupHandlerFragment: void createBackup(com.oriondev.moneywallet.model.LocalFile,java.lang.String)&gt;"/>  
        <node method="ExternalMemoryBackupHandlerFragment createBackup" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ExternalMemoryBackupHandlerFragment createBackup" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/service/disk/DiskBackupHandlerIntentService;&quot;)"/>  
        <node method="ExternalMemoryBackupHandlerFragment createBackup" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;,boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;"/>  
        <node method="MainActivity onProfileChanged" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="MainActivity onProfileChanged" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="MainActivity onProfileChanged" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;,boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.WalletListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;"/>  
        <node method="MainActivity onProfileChanged" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="MainActivity onProfileChanged" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/WalletListActivity;&quot;)"/>  
        <node method="MainActivity onProfileChanged" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;,&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;,&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;,void notifyCurrentWalletIsChanged(android.content.Context,long)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <sender action="LocalBroadCast::CurrentWalletChanged"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onProfileChanged(android.view.View,com.mikepenz.materialdrawer.model.interfaces.IProfile,boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::CurrentWalletChanged&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="TransactionMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransactionMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="TransactionMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="TransactionMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransactionMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferActivity;&quot;)"/>  
        <node method="TransactionMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.TransactionMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$4: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$4: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$4: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$6: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$6: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference), &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$6: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="UtilitySettingFragment$6 onPreferenceClick" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;($r3)"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/openexchangerates/OpenExchangeRatesCurrencyRateDownloadIntentService;&quot;)"/>  
        <node method="UtilitySettingFragment$6 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$4: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$4: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;,void showPicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$4: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: void showPicker()&gt;"/>  
        <node method="MoneyPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="MoneyPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MoneyPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.MoneyPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 4546)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.storage.database.DataContentProvider"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.DataContentProvider$1: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.DataContentProvider$1: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;,&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;,void notifyCurrentWalletIsChanged(android.content.Context,long)"/>  
      <source name="com.oriondev.moneywallet.storage.database.DataContentProvider"/>  
      <sender action="LocalBroadCast::CurrentWalletChanged"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.DataContentProvider$1: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentWallet(android.content.Context,long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void notifyCurrentWalletIsChanged(android.content.Context,long)&gt;"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="PreferenceManager notifyCurrentWalletIsChanged" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::CurrentWalletChanged&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;,void onSettingCategoryClick(int)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.AboutActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;"/>  
        <node method="SettingMultiPanelFragment onSettingCategoryClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="SettingMultiPanelFragment onSettingCategoryClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/AboutActivity;&quot;)"/>  
        <node method="SettingMultiPanelFragment onSettingCategoryClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.DebtMultiPanelViewPagerFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.DebtMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.DebtMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;,void onFloatingActionButtonClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.DebtMultiPanelViewPagerFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.DebtMultiPanelViewPagerFragment: void onFloatingActionButtonClick()&gt;"/>  
        <node method="DebtMultiPanelViewPagerFragment onFloatingActionButtonClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="DebtMultiPanelViewPagerFragment onFloatingActionButtonClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditDebtActivity;&quot;)"/>  
        <node method="DebtMultiPanelViewPagerFragment onFloatingActionButtonClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.DebtMultiPanelViewPagerFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$10: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$10: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;,void showPicker(boolean,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$10: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showPicker(boolean,boolean)&gt;"/>  
        <node method="CategoryPicker showPicker" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryPicker showPicker" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/CategoryPickerActivity;&quot;)"/>  
        <node method="CategoryPicker showPicker" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.CategoryPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: void onCategoryClick(long)&gt;,void onCategoryClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.CategoryListFragment: void onCategoryClick(long)&gt;"/>  
        <node method="CategoryListFragment onCategoryClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="CategoryListFragment onCategoryClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onCurrentWalletChanged(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onCurrentWalletChanged(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;,void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.PeriodDetailActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onCurrentWalletChanged(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;"/>  
        <node method="OverviewSinglePanelFragment onPeriodClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="OverviewSinglePanelFragment onPeriodClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/PeriodDetailActivity;&quot;)"/>  
        <node method="OverviewSinglePanelFragment onPeriodClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker$3: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker$3: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$3: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void initializeUi()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void initializeUi()&gt;,void initializeUi()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void initializeUi()&gt;"/>  
        <node method="MainActivity initializeUi" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void setContentView(int)&gt;(2131427358)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$1: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$1: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;,void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$1: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
        <node method="MainActivity$1 onInput" type="CreateMethod" unit="$r7 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$1: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$1: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;,void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$1: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
        <node method="MainActivity$1 onInput" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MainActivity$1 onInput" type="PassOutIntent" unit="virtualinvoke $r8.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <sender action="android.intent.action.DIAL" data="tel:"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.storage.database.LegacyEditionImporter"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="DatabaseSettingFragment$1 onPreferenceClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DatabaseSettingFragment$1 onPreferenceClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/BackupListActivity;&quot;)"/>  
        <node method="DatabaseSettingFragment$1 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.secondary.DatabaseSettingFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="DebtItemFragment onMenuItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DebtItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="DebtItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="DebtItemFragment onMenuItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DebtItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditDebtActivity;&quot;)"/>  
        <node method="DebtItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.DebtItemFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.BaseActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.BaseActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="BaseActivity onResume" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void startActivityForResult(android.content.Intent,int)&gt;($r3, 20)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.BaseActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MapActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onResume()&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MapActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onResume()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="BaseActivity onResume" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void startActivityForResult(android.content.Intent,int)&gt;($r3, 20)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onResume()&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MapActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MapActivity: void onResume()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="PeoplePickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="PeoplePickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPersonActivity;&quot;)"/>  
        <node method="PeoplePickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.WalletItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.WalletItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.WalletItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.WalletItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.WalletItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="WalletItemFragment onMenuItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="WalletItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="WalletItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.WalletItemFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void sendBroadcastMessage()&gt;,void sendBroadcastMessage()"/>  
      <source name="com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService"/>  
      <sender action="LocalBroadCast::ExchangeRatesUpdated"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: void sendBroadcastMessage()&gt;"/>  
        <node method="AbstractCurrencyRateDownloadIntentService sendBroadcastMessage" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService sendBroadcastMessage" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ExchangeRatesUpdated&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$2: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$2: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;,void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$2: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
        <node method="MainActivity$2 onInput" type="CreateMethod" unit="$r7 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$2: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$2: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;,void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity$2: void onInput(com.afollestad.materialdialogs.MaterialDialog,java.lang.CharSequence)&gt;"/>  
        <node method="MainActivity$2 onInput" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="MainActivity$2 onInput" type="PassOutIntent" unit="virtualinvoke $r8.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: void onTransferClick(long)&gt;,void onTransferClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferListFragment: void onTransferClick(long)&gt;"/>  
        <node method="TransferListFragment onTransferClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransferListFragment onTransferClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onResume()&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onResume()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="BaseActivity onResume" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void startActivityForResult(android.content.Intent,int)&gt;($r3, 20)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onResume()&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onResume()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="PlaceItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="PlaceItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="PlaceItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="PlaceItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="PlaceItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPlaceActivity;&quot;)"/>  
        <node method="PlaceItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.TutorialActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.TutorialActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="TutorialActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.App"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="TransactionItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransactionItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="TransactionItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.github.paolorotolo.appintro.AppIntroBase"> 
    <intentSummary> 
      <method value="&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.github.paolorotolo.appintro.AppIntroBase"/>  
      <nodes> 
        <node method="&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AppIntroBase onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.github.paolorotolo.appintro.AppIntroBase: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.github.paolorotolo.appintro.AppIntro2"> 
    <intentSummary> 
      <method value="&lt;com.github.paolorotolo.appintro.AppIntro2: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.github.paolorotolo.appintro.AppIntro2: void onCreate(android.os.Bundle)&gt;,&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.github.paolorotolo.appintro.AppIntro2"/>  
      <nodes> 
        <node method="&lt;com.github.paolorotolo.appintro.AppIntro2: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AppIntroBase onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.github.paolorotolo.appintro.AppIntroBase: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity changeMode" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeMode" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivityForResult(android.content.Intent,int)&gt;($r6, 8239)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity changeMode" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeMode" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;($r8)"/>  
        <node method="LockActivity disableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity disableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivityForResult(android.content.Intent,int)&gt;($r6, 8239)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity enableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity enableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivityForResult(android.content.Intent,int)&gt;($r6, 8239)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;($r8)"/>  
        <node method="LockActivity disableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity disableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity enableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity enableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$3: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$3: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void access$100(com.oriondev.moneywallet.ui.activity.LauncherActivity)&gt;,&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;,void startMainActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity$3: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void access$100(com.oriondev.moneywallet.ui.activity.LauncherActivity)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;"/>  
        <node method="LauncherActivity startMainActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="LauncherActivity startMainActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/MainActivity;&quot;)"/>  
        <node method="LauncherActivity startMainActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="BudgetItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BudgetItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditBudgetActivity;&quot;)"/>  
        <node method="BudgetItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="BudgetItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BudgetItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="BudgetItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.BudgetItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="CategoryItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="CategoryItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditCategoryActivity;&quot;)"/>  
        <node method="CategoryItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="CategoryItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="CategoryItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="CategoryItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.CategoryItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)&gt;,void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <sender action="LocalBroadCast::AttachmentOperationFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFailed(com.oriondev.moneywallet.model.Attachment,int,java.lang.String)&gt;"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFailed" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFailed" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::AttachmentOperationFailed&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)&gt;,void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <sender action="LocalBroadCast::AttachmentOperationFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationFinished(com.oriondev.moneywallet.model.Attachment,int)&gt;"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFinished" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="AttachmentHandlerIntentService notifyOperationFinished" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::AttachmentOperationFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)&gt;,void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <sender action="LocalBroadCast::AttachmentOperationStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void notifyOperationStarted(com.oriondev.moneywallet.model.Attachment,int)&gt;"/>  
        <node method="AttachmentHandlerIntentService notifyOperationStarted" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="AttachmentHandlerIntentService notifyOperationStarted" type="SetAttribute" unit="specialinvoke $r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::AttachmentOperationStarted&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AttachmentHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.AttachmentHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: void onRecurrentTransactionClick(long)&gt;,void onRecurrentTransactionClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransactionListFragment: void onRecurrentTransactionClick(long)&gt;"/>  
        <node method="RecurrentTransactionListFragment onRecurrentTransactionClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RecurrentTransactionListFragment onRecurrentTransactionClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.EventListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: void onEventClick(long)&gt;,void onEventClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.EventListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.EventListFragment: void onEventClick(long)&gt;"/>  
        <node method="EventListFragment onEventClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="EventListFragment onEventClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="TransferItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransferItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferActivity;&quot;)"/>  
        <node method="TransferItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransactionItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;,void notifyListTaskFinished(java.util.ArrayList)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyListTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyListTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;,void notifyTaskFailure(int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFailed&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;,void notifyTaskStarted(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceStarted&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdraw(long)&gt;,void onWithdraw(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void onWithdraw(long)&gt;"/>  
        <node method="SavingListFragment onWithdraw" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="SavingListFragment onWithdraw" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="SavingListFragment onWithdraw" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.SavingListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onPayClick(long)&gt;,void onPayClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void onPayClick(long)&gt;"/>  
        <node method="DebtListFragment onPayClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="DebtListFragment onPayClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="DebtListFragment onPayClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.DebtListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionModelItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionModelItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionModelItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionModelItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionModelItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="TransactionModelItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransactionModelItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionModelActivity;&quot;)"/>  
        <node method="TransactionModelItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionModelItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.model.Attachment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;,void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.model.Attachment"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/>  
        <node method="Attachment openAttachment" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;,void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.model.Attachment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;,android.content.Intent getActionViewIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment openAttachment" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;,void onInflateRootLayout()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;"/>  
        <node method="SinglePanelActivity onInflateRootLayout" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void setContentView(int)&gt;(2131427359)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;,void onInflateRootLayout()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void onInflateRootLayout()&gt;"/>  
        <node method="SinglePanelActivity onInflateRootLayout" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.SinglePanelActivity: void setContentView(int)&gt;(2131427359)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferModelItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferModelItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferModelItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferModelItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferModelItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="TransferModelItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransferModelItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferModelActivity;&quot;)"/>  
        <node method="TransferModelItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferModelItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;,void onLicenseClick(com.oriondev.moneywallet.model.License)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;,void onLicenseClick(com.oriondev.moneywallet.model.License)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;,void onLicenseClick(com.oriondev.moneywallet.model.License)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2$1: void onLicenseClick(com.oriondev.moneywallet.model.License)&gt;"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AboutFragment$2$1 onLicenseClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="PlacePickerActivity onMenuItemClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment: void showDeleteDialog(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.RecurrentTransferItemFragment$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreatePrimaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreatePrimaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;,void onSettingCategoryClick(int)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.AboutActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreatePrimaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;"/>  
        <node method="SettingMultiPanelFragment onSettingCategoryClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="SettingMultiPanelFragment onSettingCategoryClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/AboutActivity;&quot;)"/>  
        <node method="SettingMultiPanelFragment onSettingCategoryClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;"/>  
        <node method="AboutFragment$1 onClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;"/>  
        <node method="AboutFragment$1 onClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$1: void onClick()&gt;"/>  
        <node method="AboutFragment$1 onClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AboutFragment$1 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onFileSelected(android.net.Uri)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onFileSelected(android.net.Uri)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;,void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onFileSelected(android.net.Uri)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="AttachmentPicker onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onFileSelected(android.net.Uri)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;,void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void onFileSelected(android.net.Uri)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void createAttachmentAsync(android.net.Uri,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/>  
        <node method="AttachmentPicker createAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;,boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.AboutActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
        <node method="MainActivity onItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="MainActivity onItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/AboutActivity;&quot;)"/>  
        <node method="MainActivity onItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;,boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
        <node method="MainActivity onItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="MainActivity onItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/CurrencyConverterActivity;&quot;)"/>  
        <node method="MainActivity onItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;,boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
        <node method="MainActivity onItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="MainActivity onItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/CalculatorActivity;&quot;)"/>  
        <node method="MainActivity onItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment openAttachment" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;,android.content.Intent getActionViewIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <sender action="android.intent.action.VIEW"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <sender action="android.intent.action.VIEW"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r3)"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createMapOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createMapItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createMapOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$6: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$6 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;"/>  
        <node method="AboutFragment$4 onClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;"/>  
        <node method="AboutFragment$4 onClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AboutFragment$4 onClick" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;,void onClick()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$4: void onClick()&gt;"/>  
        <node method="AboutFragment$4 onClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;,void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyUploadTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyUploadTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;,void notifyTaskProgress(int,int,int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceRunning"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceRunning&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;,void notifyTaskStarted(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceStarted&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;,void notifyTaskFailure(int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFailed&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1208483840)"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1207959552)"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment openAttachment" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;,android.content.Intent getActionViewIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelEditClick(long)&gt;,void onModelEditClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void onModelEditClick(long)&gt;"/>  
        <node method="TransactionModelListFragment onModelEditClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransactionModelListFragment onModelEditClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransactionActivity;&quot;)"/>  
        <node method="TransactionModelListFragment onModelEditClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionModelListFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;,void startIconPickerActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.IconListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$200(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void startIconPickerActivity()&gt;"/>  
        <node method="IconPicker startIconPickerActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="IconPicker startIconPickerActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/IconListActivity;&quot;)"/>  
        <node method="IconPicker startIconPickerActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.IconPicker: void startActivityForResult(android.content.Intent,int)&gt;($r1, 57)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="PersonItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="PersonItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPersonActivity;&quot;)"/>  
        <node method="PersonItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="PersonItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="PersonItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="PersonItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.PersonItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="EventItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="EventItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditEventActivity;&quot;)"/>  
        <node method="EventItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="EventItemFragment onMenuItemClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="EventItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="EventItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.EventItemFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="UtilitySettingFragment onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: void onBudgetClick(long)&gt;,void onBudgetClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.BudgetListFragment: void onBudgetClick(long)&gt;"/>  
        <node method="BudgetListFragment onBudgetClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="BudgetListFragment onBudgetClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="EventPickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="EventPickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditEventActivity;&quot;)"/>  
        <node method="EventPickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="PlaceItemFragment$1 onClick" type="CreateMethod" unit="$r10 = new android.content.Intent"/>  
        <node method="PlaceItemFragment$1 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment: void startActivity(android.content.Intent)&gt;($r10)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="PlaceItemFragment$1 onClick" type="CreateMethod" unit="$r10 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.PlaceItemFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="PlaceItemFragment$1 onClick" type="CreateMethod" unit="$r10 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: void onResume()&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: void onResume()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="BaseActivity onResume" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void startActivityForResult(android.content.Intent,int)&gt;($r3, 20)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: void onResume()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: void onResume()&gt;,&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;,void onResume()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.PlacePickerActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.PlacePickerActivity: void onResume()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.BaseActivity: void onResume()&gt;"/>  
        <node method="BaseActivity onResume" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="BaseActivity onResume" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.TutorialActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.github.paolorotolo.appintro.AppIntro2: void onCreate(android.os.Bundle)&gt;,&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.TutorialActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.TutorialActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.github.paolorotolo.appintro.AppIntro2: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.github.paolorotolo.appintro.AppIntroBase: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AppIntroBase onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.github.paolorotolo.appintro.AppIntroBase: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void onCategoryClick(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void onCategoryClick(long)&gt;,void onCategoryClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CategoryPickerActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CategoryPickerActivity: void onCategoryClick(long)&gt;"/>  
        <node method="CategoryPickerActivity onCategoryClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="NewEditTransferActivity onAttachmentClick" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;(r0)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="NewEditTransferActivity onAttachmentClick" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;(r0)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/>  
        <node method="NewEditTransferActivity onAttachmentClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createEmailOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createEmailItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createEmailOnClickAction(android.content.Context,java.lang.String,java.lang.String,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$4: void &lt;init&gt;(android.content.Context,android.content.Intent,java.lang.CharSequence)&gt;"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$4 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MultiPanelActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void setContentView(int)&gt;(2131427358)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$2: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="WalletPickerDialog$2 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="WalletPickerDialog$2 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="WalletPickerDialog$2 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="WalletPickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="WalletPickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditWalletActivity;&quot;)"/>  
        <node method="WalletPickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCurrentWalletChanged(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCurrentWalletChanged(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCategoryClick(long)&gt;,void onCategoryClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCurrentWalletChanged(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void onCategoryClick(long)&gt;"/>  
        <node method="PeriodDetailFlowFragment onCategoryClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PeriodDetailFlowFragment onCategoryClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="PeriodDetailFlowFragment onCategoryClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailFlowFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="ParentCategoryPickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="ParentCategoryPickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditCategoryActivity;&quot;)"/>  
        <node method="ParentCategoryPickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;,android.content.Intent getActionViewIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment openAttachment" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: void onRecurrentTransferClick(long)&gt;,void onRecurrentTransferClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.RecurrentTransferListFragment: void onRecurrentTransferClick(long)&gt;"/>  
        <node method="RecurrentTransferListFragment onRecurrentTransferClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="RecurrentTransferListFragment onRecurrentTransferClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.BackupListActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="BackupListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void setContentView(int)&gt;(2131427358)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelClick(long)&gt;,void onModelClick(long)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment"/>  
      <sender action="LocalBroadCast::ItemClicked"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransferModelListFragment: void onModelClick(long)&gt;"/>  
        <node method="TransferModelListFragment onModelClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="TransferModelListFragment onModelClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::ItemClicked&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;,void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog$1: void onClick(com.afollestad.materialdialogs.MaterialDialog,com.afollestad.materialdialogs.DialogAction)&gt;"/>  
        <node method="PlacePickerDialog$1 onClick" type="CreateMethod" unit="$r5 = new android.content.Intent"/>  
        <node method="PlacePickerDialog$1 onClick" type="SetAttribute" unit="specialinvoke $r5.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditPlaceActivity;&quot;)"/>  
        <node method="PlacePickerDialog$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LauncherActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LauncherActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void setContentView(int)&gt;(2131427356)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LauncherActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void setContentView(int)&gt;(2131427356)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;,void startMainActivity()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startMainActivity()&gt;"/>  
        <node method="LauncherActivity startMainActivity" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="LauncherActivity startMainActivity" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/MainActivity;&quot;)"/>  
        <node method="LauncherActivity startMainActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LauncherActivity onCreate" type="CreateMethod" unit="$r7 = new android.content.Intent"/>  
        <node method="LauncherActivity onCreate" type="SetAttribute" unit="specialinvoke $r7.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/service/UpgradeLegacyEditionIntentService;&quot;)"/>  
        <node method="LauncherActivity onCreate" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: android.content.ComponentName startService(android.content.Intent)&gt;($r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LauncherActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="LauncherActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LauncherActivity: void setContentView(int)&gt;(2131427355)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,void onAttachmentClick(com.oriondev.moneywallet.model.Attachment), &lt;com.oriondev.moneywallet.model.Attachment: void openAttachment(android.content.Context,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <destinition name="interICC_android.intent.action.VIEW, "/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="Attachment openAttachment" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;($r1)"/>  
        <node method="Attachment openAttachment" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;,android.content.Intent getActionViewIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <sender action="android.intent.action.VIEW" type="new java.lang.String" flags="FLAG_ACTIVITY_NEW_TASK , FLAG_GRANT_READ_URI_PERMISSION "/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onAttachmentClick(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.model.Attachment: android.content.Intent getActionViewIntent(android.content.Context)&gt;"/>  
        <node method="Attachment getActionViewIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)&gt;($r2, $r4)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="Attachment getActionViewIntent" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;,&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;,void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.oriondev.moneywallet.service.AttachmentHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onSaveChanges(com.oriondev.moneywallet.ui.activity.NewEditItemActivity$Mode)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void cleanUp(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: void deleteAttachmentAsync(com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/service/AttachmentHandlerIntentService;&quot;)"/>  
        <node method="AttachmentPicker deleteAttachmentAsync" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void initializeUi(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void initializeUi(android.os.Bundle)&gt;,void initializeUi(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void initializeUi(android.os.Bundle)&gt;"/>  
        <node method="LockActivity initializeUi" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void setContentView(int)&gt;(2131427357)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.LockActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void initializeUi(android.os.Bundle)&gt;,void initializeUi(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void initializeUi(android.os.Bundle)&gt;"/>  
        <node method="LockActivity initializeUi" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.LockActivity: void setContentView(int)&gt;(2131427357)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CalculatorActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void execute()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void execute()&gt;,void execute()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void execute()&gt;"/>  
        <node method="CalculatorActivity execute" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.broadcast.BootBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BootBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.broadcast.BootBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;,&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onHeaderClick(java.util.Date,java.util.Date)&gt;,void onHeaderClick(java.util.Date,java.util.Date)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.PeriodDetailActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: com.oriondev.moneywallet.ui.adapter.recycler.AbstractCursorAdapter onCreateAdapter()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void onHeaderClick(java.util.Date,java.util.Date)&gt;"/>  
        <node method="TransactionListFragment onHeaderClick" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="TransactionListFragment onHeaderClick" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/PeriodDetailActivity;&quot;)"/>  
        <node method="TransactionListFragment onHeaderClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.primary.TransactionListFragment: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="RecurrenceHandlerIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.RecurrenceHandlerIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;,void notifyTaskProgress(int,int,int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceRunning"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceRunning&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;,void notifyTaskStarted(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceStarted&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;,void notifyTaskFinished(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;,void notifyTaskFailure(int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFailed&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void onCreate(android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void initializeUi()&gt;,void initializeUi()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void initializeUi()&gt;"/>  
        <node method="MainActivity initializeUi" type="setContentView" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void setContentView(int)&gt;(2131427358)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onCurrentWalletChanged(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onCurrentWalletChanged(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;,void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onCurrentWalletChanged(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void onPeriodClick(com.oriondev.moneywallet.model.PeriodMoney)&gt;"/>  
        <node method="PeriodDetailSummaryFragment onPeriodClick" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="PeriodDetailSummaryFragment onPeriodClick" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="PeriodDetailSummaryFragment onPeriodClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.single.PeriodDetailSummaryFragment: void startActivity(android.content.Intent)&gt;($r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <sender action="android.intent.action.DIAL" data="tel:"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.DIAL&quot;)"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="SetAttribute" unit="virtualinvoke $r1.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r4)"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createPhoneOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createPhoneItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,boolean,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createPhoneOnClickAction(android.content.Context,java.lang.String)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$5: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$5 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;,void notifyListTaskFinished(java.util.ArrayList)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyListTaskFinished(java.util.ArrayList)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyListTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyListTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;,void notifyTaskProgress(int,int,int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceRunning"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskProgress(int,int,int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskProgress" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceRunning&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;,void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyUploadTaskFinished(com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyUploadTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyUploadTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionBackup(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;,void notifyTaskFinished(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFinished(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;,void notifyTaskStarted(int)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskStarted(int)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceStarted&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService onActionRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;,void notifyTaskFailure(int,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <sender action="LocalBroadCast::BackupServiceFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionList(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void notifyTaskFailure(int,java.lang.String)&gt;"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="AbstractBackupHandlerIntentService notifyTaskFailure" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::BackupServiceFailed&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;,void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.AbstractBackupHandlerIntentService: void onActionRestore(android.content.Intent,com.oriondev.moneywallet.model.IFile)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.App"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;,void startBackgroundTask(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.service.RecurrenceHandlerIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void startBackgroundTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/RecurrenceHandlerIntentService;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver startBackgroundTask" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,void scheduleRecurrenceTask(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;,&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;,void initializeScheduledTimers(), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context)&gt;, &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.App"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.App: void onCreate()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.App: void initializeScheduledTimers()&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity changeMode" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeMode" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivityForResult(android.content.Intent,int)&gt;($r6, 8239)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeMode(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity changeMode" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeMode" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="UtilitySettingFragment$3 onPreferenceClick" type="ReceiveIntentFromRetValue" unit="$r5 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent changeKey(android.app.Activity)&gt;($r4)"/>  
        <node method="LockActivity changeKey" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity changeKey" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$3 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r2.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivity(android.content.Intent)&gt;($r5)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;($r8)"/>  
        <node method="LockActivity disableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity disableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivityForResult(android.content.Intent,int)&gt;($r6, 8239)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity enableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity enableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="PassOutIntent" unit="virtualinvoke $r7.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void startActivityForResult(android.content.Intent,int)&gt;($r6, 8239)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent enableLock(android.app.Activity,com.oriondev.moneywallet.model.LockMode)&gt;($r8, $r9)"/>  
        <node method="LockActivity enableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity enableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.LockActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$2: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="UtilitySettingFragment$2 onPreferenceChange" type="ReceiveIntentFromRetValue" unit="$r6 = staticinvoke &lt;com.oriondev.moneywallet.ui.activity.LockActivity: android.content.Intent disableLock(android.app.Activity)&gt;($r8)"/>  
        <node method="LockActivity disableLock" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="LockActivity disableLock" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Lcom/oriondev/moneywallet/ui/activity/LockActivity;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$1: boolean onPreferenceChange(android.support.v7.preference.Preference,java.lang.Object)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$6: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference), &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.service.openexchangerates.OpenExchangeRatesCurrencyRateDownloadIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UtilitySettingFragment$6: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="UtilitySettingFragment$6 onPreferenceClick" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;com.oriondev.moneywallet.service.AbstractCurrencyRateDownloadIntentService: android.content.Intent buildIntent(android.app.Activity)&gt;($r3)"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="AbstractCurrencyRateDownloadIntentService buildIntent" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Lcom/oriondev/moneywallet/service/openexchangerates/OpenExchangeRatesCurrencyRateDownloadIntentService;&quot;)"/>  
        <node method="UtilitySettingFragment$6 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.Activity: android.content.ComponentName startService(android.content.Intent)&gt;($r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.MaterialAboutActivity"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.MaterialAboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.MaterialAboutActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.danielstone.materialaboutlibrary.MaterialAboutActivity"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.MaterialAboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MaterialAboutActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;com.danielstone.materialaboutlibrary.MaterialAboutActivity: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.CalculatorActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void execute()&gt;,void execute()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CalculatorActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CalculatorActivity: void execute()&gt;"/>  
        <node method="CalculatorActivity execute" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFinished()&gt;,void notifyServiceFinished()"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <sender action="LocalBroadCast::LegacyEditionUpgradeFinished"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFinished()&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFinished" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFinished" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::LegacyEditionUpgradeFinished&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;,android.app.PendingIntent createNotificationIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFailed(java.lang.String)&gt;,void notifyServiceFailed(java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <sender action="LocalBroadCast::LegacyEditionUpgradeFailed"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceFailed(java.lang.String)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFailed" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceFailed" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::LegacyEditionUpgradeFailed&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;,android.app.PendingIntent createPendingIntent(android.content.Context)"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceStarted()&gt;,void notifyServiceStarted()"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <sender action="LocalBroadCast::LegacyEditionUpgradeStarted"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void notifyServiceStarted()&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceStarted" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="UpgradeLegacyEditionIntentService notifyServiceStarted" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;LocalBroadCast::LegacyEditionUpgradeStarted&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;,void scheduleDailyNotification(android.content.Context,int), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void scheduleDailyNotification(android.content.Context,int)&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;,void schedulePendingIntent(android.content.Context,java.util.Date), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void schedulePendingIntent(android.content.Context,java.util.Date)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver schedulePendingIntent" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;,void cancelDailyNotification(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: void cancelDailyNotification(android.content.Context)&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;,void cancelPendingIntent(android.content.Context), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void cancelPendingIntent(android.content.Context)&gt;"/>  
        <node method="RecurrenceBroadcastReceiver cancelPendingIntent" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: android.app.PendingIntent createPendingIntent(android.content.Context)&gt;($r0)"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="RecurrenceBroadcastReceiver createPendingIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/RecurrenceBroadcastReceiver;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver cancelDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;,void importPreferences(), &lt;com.oriondev.moneywallet.storage.preference.PreferenceManager: void setCurrentDailyReminder(android.content.Context,int)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <destinition name="com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.storage.database.LegacyEditionImporter: void importPreferences()&gt;"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="CreateMethod" unit="$r0 = new android.content.Intent"/>  
        <node method="DailyBroadcastReceiver createNotificationIntent" type="SetAttribute" unit="specialinvoke $r0.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/broadcast/DailyBroadcastReceiver;&quot;)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="ReceiveIntentFromRetValue" unit="$r1 = staticinvoke &lt;com.oriondev.moneywallet.broadcast.DailyBroadcastReceiver: android.app.PendingIntent createNotificationIntent(android.content.Context)&gt;($r0)"/>  
        <node method="DailyBroadcastReceiver scheduleDailyNotification" type="PassOutIntent" unit="virtualinvoke $r3.&lt;android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l2, 86400000L, $r1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent), &lt;com.oriondev.moneywallet.broadcast.RecurrenceBroadcastReceiver: void scheduleRecurrenceTask(android.content.Context)&gt;"/>  
      <source name="com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.service.UpgradeLegacyEditionIntentService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="UpgradeLegacyEditionIntentService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.TransactionListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="SavingItemFragment onMenuItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="SavingItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/TransactionListActivity;&quot;)"/>  
        <node method="SavingItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,boolean onMenuItemClick(android.view.MenuItem)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="SavingItemFragment onMenuItemClick" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="SavingItemFragment onMenuItemClick" type="SetAttribute" unit="specialinvoke $r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditSavingActivity;&quot;)"/>  
        <node method="SavingItemFragment onMenuItemClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.secondary.SavingItemFragment: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.danielstone.materialaboutlibrary.ConvenienceBuilder"> 
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;,void &lt;init&gt;(android.content.Context,android.content.Intent)"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1208483840)"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
      <methodtrace value="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;,&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;,com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context), &lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder$3: void &lt;init&gt;(android.content.Context,android.content.Intent)&gt;"/>  
      <source name="com.danielstone.materialaboutlibrary.ConvenienceBuilder"/>  
      <nodes> 
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutActionItem createRateActionItem(android.content.Context,android.graphics.drawable.Drawable,java.lang.CharSequence,java.lang.CharSequence)&gt;"/>  
        <node method="&lt;com.danielstone.materialaboutlibrary.ConvenienceBuilder: com.danielstone.materialaboutlibrary.items.MaterialAboutItemOnClickAction createRateOnClickAction(android.content.Context)&gt;"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="CreateMethod" unit="$r4 = new android.content.Intent"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="SetAttribute" unit="virtualinvoke $r4.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1207959552)"/>  
        <node method="ConvenienceBuilder$3 &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ConvenienceBuilder createRateOnClickAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="NewEditTransactionActivity onViewCreated" type="CreateMethod" unit="$r27 = new android.content.Intent"/>  
        <node method="NewEditTransactionActivity onViewCreated" type="SetAttribute" unit="specialinvoke $r27.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferActivity;&quot;)"/>  
        <node method="NewEditTransactionActivity onViewCreated" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void startActivity(android.content.Intent)&gt;($r27)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="NewEditTransactionActivity onViewCreated" type="CreateMethod" unit="$r27 = new android.content.Intent"/>  
        <node method="NewEditTransactionActivity onViewCreated" type="SetAttribute" unit="specialinvoke $r27.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Lcom/oriondev/moneywallet/ui/activity/NewEditTransferActivity;&quot;)"/>  
        <node method="NewEditTransactionActivity onViewCreated" type="PassOutIntent" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void startActivity(android.content.Intent)&gt;($r27)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;"/>  
        <node method="BudgetTypePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="BudgetTypePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.DateTimePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;,com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)"/>  
      <source name="com.oriondev.moneywallet.picker.DateTimePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.CategoryPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;,com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)"/>  
      <source name="com.oriondev.moneywallet.picker.CategoryPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.MapPlacePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: com.oriondev.moneywallet.picker.MapPlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: com.oriondev.moneywallet.picker.MapPlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;,com.oriondev.moneywallet.picker.MapPlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)"/>  
      <source name="com.oriondev.moneywallet.picker.MapPlacePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.MapPlacePicker: com.oriondev.moneywallet.picker.MapPlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
        <node method="MapPlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MapPlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MapPlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="MapPlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
        <node method="RecurrencePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;,com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.BudgetTypePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;,com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)"/>  
      <source name="com.oriondev.moneywallet.picker.BudgetTypePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;"/>  
        <node method="BudgetTypePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="BudgetTypePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="BudgetTypePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="BudgetTypePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.WalletPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;,com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])"/>  
      <source name="com.oriondev.moneywallet.picker.WalletPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;"/>  
        <node method="ParentCategoryPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ParentCategoryPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
        <node method="PeoplePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PeoplePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.OverviewSettingPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: com.oriondev.moneywallet.picker.OverviewSettingPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: com.oriondev.moneywallet.picker.OverviewSettingPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;,com.oriondev.moneywallet.picker.OverviewSettingPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.picker.OverviewSettingPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: com.oriondev.moneywallet.picker.OverviewSettingPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="OverviewSettingPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="OverviewSettingPicker createPicker" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="OverviewSettingPicker createPicker" type="addFunction" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r3, $r0)"/>  
        <node method="OverviewSettingPicker createPicker" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.PlacePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;,com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)"/>  
      <source name="com.oriondev.moneywallet.picker.PlacePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void showSafely(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ChangeLogDialog showSafely" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ChangeLogDialog showSafely" type="dialogShow" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r0)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void showSafely(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ChangeLogDialog showSafely" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ChangeLogDialog showSafely" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ChangeLogDialog showSafely" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.color.ColorChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.EventPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.EventPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FolderChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.OverviewSetting)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.OverviewSetting)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.OverviewSetting)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.OverviewSetting)&gt;"/>  
        <node method="OverviewSettingDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="OverviewSettingDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.PersonPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;,com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])"/>  
      <source name="com.oriondev.moneywallet.picker.PersonPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
        <node method="PersonPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PersonPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
        <node method="CurrencyConverterDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.CurrencyConverterPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;,void showPicker(long), &lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.CurrencyConverterPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;"/>  
        <node method="CurrencyConverterDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.PersonPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.PersonPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;"/>  
        <node method="PeoplePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PeoplePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.MoneyPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;,com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)"/>  
      <source name="com.oriondev.moneywallet.picker.MoneyPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.RecurrencePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;,com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)"/>  
      <source name="com.oriondev.moneywallet.picker.RecurrencePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
        <node method="RecurrencePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RecurrencePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="RecurrencePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;,void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$10"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$10: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$10: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$10: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;,void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;"/>  
        <node method="LicenseDialog showSafely" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="LicenseDialog showSafely" type="beginTransaction" unit="$r5 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="LicenseDialog showSafely" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;,void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;"/>  
        <node method="LicenseDialog showSafely" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="LicenseDialog showSafely" type="dialogShow" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r2, $r0)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.AttachmentPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;,com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)"/>  
      <source name="com.oriondev.moneywallet.picker.AttachmentPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
        <node method="AttachmentPicker createPicker" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="AttachmentPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="AttachmentPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="AttachmentPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.CategoryPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showParentPicker(long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showParentPicker(long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;,void showParentPicker(long,com.oriondev.moneywallet.storage.database.Contract$CategoryType), &lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.CategoryPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CategoryPicker: void showParentPicker(long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;"/>  
        <node method="ParentCategoryPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ParentCategoryPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.CurrencyConverterPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;,com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)"/>  
      <source name="com.oriondev.moneywallet.picker.CurrencyConverterPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
        <node method="CurrencyConverterPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterPicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;,void loadSecondaryFragment(int)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="getFragment" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$9"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$9: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$9: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$9: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5: void onClick()&gt;,void onClick(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5: void onClick()&gt;"/>  
        <node method="ChangeLogDialog showSafely" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ChangeLogDialog showSafely" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ChangeLogDialog showSafely" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5: void onClick()&gt;,void onClick(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$5: void onClick()&gt;"/>  
        <node method="ChangeLogDialog showSafely" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ChangeLogDialog showSafely" type="dialogShow" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ChangeLogDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r0)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$9"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$9: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$9: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$9: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;"/>  
        <node method="PeoplePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PeoplePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;,void showPicker(long), &lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;"/>  
        <node method="CurrencyConverterDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showMultiPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showMultiPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;,void showMultiPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showMultiPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
        <node method="WalletPickerDialog showMultiPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showMultiPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FolderChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,void show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FolderChooserDialog show" type="getFragment" unit="$r1 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,void show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FolderChooserDialog show" type="getFragment" unit="$r1 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FolderChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.BudgetTypePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.BudgetTypePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: void showPicker()&gt;"/>  
        <node method="BudgetTypePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="BudgetTypePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.EventPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;,com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)"/>  
      <source name="com.oriondev.moneywallet.picker.EventPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$9"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$9: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$9: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$9: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;,void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category,long,com.oriondev.moneywallet.storage.database.Contract$CategoryType)&gt;"/>  
        <node method="ParentCategoryPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ParentCategoryPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.ParentCategoryPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.WalletPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;,com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)"/>  
      <source name="com.oriondev.moneywallet.picker.WalletPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.OverviewSettingPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.OverviewSetting)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.OverviewSettingPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: void showPicker()&gt;"/>  
        <node method="OverviewSettingDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="OverviewSettingDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$9"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$9: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$9: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$9: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.BudgetTypePicker: void showPicker()&gt;"/>  
        <node method="BudgetTypePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="BudgetTypePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.BudgetTypePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.WalletPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.WalletPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;,void showPicker(long), &lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;"/>  
        <node method="CurrencyConverterDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FolderChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FolderChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FolderChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FolderChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FolderChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FolderChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FolderChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FolderChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FolderChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FolderChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.CurrencyPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;,com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)"/>  
      <source name="com.oriondev.moneywallet.picker.CurrencyPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
        <node method="CurrencyPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.PlacePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.PlacePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;,void showPicker(long), &lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: void showPicker(long)&gt;"/>  
        <node method="CurrencyConverterDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CurrencyConverterDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$11"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$11: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$11: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$11: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;"/>  
        <node method="PeoplePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PeoplePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.RecurrencePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.RecurrencePicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;"/>  
        <node method="RecurrencePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$8"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$8: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$8: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$8: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$5: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$5: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.CustomDigitSetupDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$5: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="UserInterfaceSettingFragment$5 onPreferenceClick" type="getFragment" unit="$r4 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="UserInterfaceSettingFragment$5 onPreferenceClick" type="dialogShow" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CustomDigitSetupDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, &quot;UserInterfaceSettingFragment::Tag::CustomDigit::DialogFragment&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$12"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$12: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$12: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$12: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PersonPicker: void showPicker()&gt;"/>  
        <node method="PeoplePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PeoplePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PeoplePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$7"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$7: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$7: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;,void showPicker(java.util.Date), &lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$7: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.EventPicker: void showPicker(java.util.Date)&gt;"/>  
        <node method="EventPickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.EventPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$8"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$8: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$8: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$8: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;"/>  
        <node method="RecurrencePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FileChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FileChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$8"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$8: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$8: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$8: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$8"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$8: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$8: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$8: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.RecurrencePicker: void showPicker()&gt;"/>  
        <node method="RecurrencePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.ColorPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;,com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)"/>  
      <source name="com.oriondev.moneywallet.picker.ColorPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.color.ColorChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$14"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$14: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$14: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$14: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.CurrencyPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;,com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String), &lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.CurrencyPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="CurrencyPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.WalletPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showMultiWalletPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showMultiWalletPicker()&gt;,void showMultiWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showMultiPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.WalletPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showMultiWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showMultiPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showMultiPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$11"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$11: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$11: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity$11: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$8"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$8: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$8: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$8: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$10"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$10: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$10: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$10: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$7"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$7: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$7: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$7: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.ColorPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.ColorPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.ColorPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,void showPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.ColorPicker"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="ColorPicker showPicker" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.ColorPicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="ColorPicker showPicker" type="dialogShow" unit="virtualinvoke $r1.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.picker.ColorPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$11"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$11: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$11: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$11: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.OverviewSetting)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: boolean onMenuItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: void showPicker()&gt;"/>  
        <node method="OverviewSettingDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="OverviewSettingDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;,void loadSecondaryFragment(int)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="getFragment" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$13"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$13: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$13: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$13: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$7"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$7: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$7: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$7: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.color.ColorChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="ColorChooserDialog show" type="getFragment" unit="$r2 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="r0 = virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FileChooserDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FileChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,void show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FileChooserDialog show" type="getFragment" unit="$r1 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;,void show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FileChooserDialog show" type="getFragment" unit="$r1 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FileChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$8"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$8: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$8: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;,void showSingleWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showSinglePicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$8: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showSingleWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showSinglePicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showSinglePicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,void showPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="ColorPicker showPicker" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.ColorPicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="ColorPicker showPicker" type="dialogShow" unit="virtualinvoke $r1.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.color.ColorChooserDialog$Builder"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$9"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$9: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$9: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;,void showPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void showPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity$9: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.PlacePicker: void showPicker()&gt;"/>  
        <node method="PlacePickerDialog showPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePickerDialog showPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.PlacePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FileChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FileChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,void showPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="ColorPicker showPicker" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.ColorPicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="ColorPicker showPicker" type="dialogShow" unit="virtualinvoke $r1.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$3: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,void showPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="ColorPicker showPicker" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.ColorPicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="ColorPicker showPicker" type="dialogShow" unit="virtualinvoke $r1.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$13"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$13: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$13: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.WalletPicker: void showMultiWalletPicker()&gt;,void showMultiWalletPicker(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void showMultiPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$13: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.WalletPicker: void showMultiWalletPicker()&gt;"/>  
        <node method="WalletPickerDialog showMultiPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPickerDialog showMultiPicker" type="dialogShow" unit="virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.dialog.WalletPickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r2)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FileChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="FileChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="FileChooserDialog show" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;,void show(android.support.v4.app.FragmentManager)"/>  
      <source name="com.afollestad.materialdialogs.folderselector.FileChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog$Builder: com.afollestad.materialdialogs.folderselector.FileChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="FileChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="FileChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.folderselector.FileChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, $r3)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,void showPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="ColorPicker showPicker" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.ColorPicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="ColorPicker showPicker" type="dialogShow" unit="virtualinvoke $r1.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$4: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.afollestad.materialdialogs.color.ColorChooserDialog$Builder"> 
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.IconPicker$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.manager.RequestManagerRetriever"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.manager.RequestManagerRetriever"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.Glide"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.view.AttachmentView"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.view.AttachmentView"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.view.AttachmentView"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.Glide"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.load.resource.gif.GifFrameLoader"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifFrameLoader"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifFrameLoader"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifFrameLoader"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.load.resource.gif.GifDrawable"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifDrawable"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifDrawable"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifDrawable"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder: com.bumptech.glide.load.resource.gif.GifDrawableResource decode(java.nio.ByteBuffer,int,int,com.bumptech.glide.gifdecoder.GifHeaderParser,com.bumptech.glide.load.Options)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle), &lt;com.oriondev.moneywallet.picker.OverviewSettingPicker: com.oriondev.moneywallet.picker.OverviewSettingPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.singlepanel.OverviewSinglePanelFragment: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="OverviewSettingPicker createPicker" type="addFunction" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r3, $r0)"/>  
        <node method="OverviewSettingPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="OverviewSettingPicker createPicker" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="OverviewSettingPicker createPicker" type="addFunction" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r3, $r0)"/>  
        <node method="OverviewSettingPicker createPicker" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MapPlacePicker: com.oriondev.moneywallet.picker.MapPlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MapPlacePicker: com.oriondev.moneywallet.picker.MapPlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MapPlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="MapPlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MapPlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MapPlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="MapPlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreateFragments(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreateFragments(android.support.v4.app.FragmentManager)&gt;,void onCreateFragments(android.support.v4.app.FragmentManager), &lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreateFragments(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="UserInterfaceSettingFragment onCreateFragments" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreateFragments(android.support.v4.app.FragmentManager)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreateFragments(android.support.v4.app.FragmentManager)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;,com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreateFragments(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.DateTimePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.picker.DateTimePicker"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$3"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$3: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$3: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$3: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.AboutActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.AboutActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="AboutActivity onCreatePanelView" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="AboutActivity onCreatePanelView" type="beginTransaction" unit="$r6 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="AboutActivity onCreatePanelView" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.AboutActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="AboutActivity onCreatePanelView" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.AboutActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="AboutActivity onCreatePanelView" type="beginTransaction" unit="$r6 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="AboutActivity onCreatePanelView" type="replaceFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;($i0, $r7, &quot;AboutActivity::Tag::AboutFragment&quot;)"/>  
        <node method="AboutActivity onCreatePanelView" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPlaceActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$11"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$11: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$11: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$11: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onAttachmentListChanged(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.DateTimePicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;,void showTimePicker()"/>  
      <source name="com.oriondev.moneywallet.picker.DateTimePicker"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog, com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;"/>  
        <node method="DateTimePicker showTimePicker" type="getFragment" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showTimePicker" type="dialogShow" unit="virtualinvoke $r2.&lt;com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r3, $r4)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;,void showTimePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog, com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;"/>  
        <node method="DateTimePicker showTimePicker" type="getFragment" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showTimePicker" type="dialogShow" unit="virtualinvoke $r2.&lt;com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r3, $r4)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)&gt;,void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)&gt;"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="beginTransaction" unit="$r5 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)&gt;,void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: void onBackupServiceClick(com.oriondev.moneywallet.model.BackupService)&gt;"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.BackupMultiPanelFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="beginTransaction" unit="$r5 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="replaceFunction" unit="$r5 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;($i0, $r4, $r3)"/>  
        <node method="BackupMultiPanelFragment onBackupServiceClick" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.Glide"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Activity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Activity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Activity)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Activity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Activity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.BackupFileAdapter$ViewHolder,int)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;,void onClick(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
        <node method="LicenseDialog showSafely" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="LicenseDialog showSafely" type="beginTransaction" unit="$r5 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="LicenseDialog showSafely" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;,void onClick(), &lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void showSafely(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog$Callback)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.single.AboutFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.single.AboutFragment$2: void onClick()&gt;"/>  
        <node method="LicenseDialog showSafely" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="LicenseDialog showSafely" type="dialogShow" unit="virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.fragment.dialog.LicenseDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r2, $r0)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreateSecondaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreateSecondaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;,void loadSecondaryFragment(int)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreateSecondaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="getFragment" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditEventActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$3"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$3: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$3: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$3: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$7"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$7: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$7: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;,void showTimePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog, com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity$7: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showTimePicker()&gt;"/>  
        <node method="DateTimePicker showTimePicker" type="getFragment" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showTimePicker" type="dialogShow" unit="virtualinvoke $r2.&lt;com.philliphsu.bottomsheetpickers.time.numberpad.NumberPadTimePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r3, $r4)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreatePrimaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreatePrimaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;,void loadSecondaryFragment(int)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onCreatePrimaryPanel(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void onSettingCategoryClick(int)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: void loadSecondaryFragment(int)&gt;"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="getFragment" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.fragment.multipanel.SettingMultiPanelFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="SettingMultiPanelFragment loadSecondaryFragment" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void loadSection(int)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void loadSection(int)&gt;,void loadSection(int)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void loadSection(int)&gt;"/>  
        <node method="MainActivity loadSection" type="getFragment" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="MainActivity loadSection" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MainActivity loadSection" type="replaceFunction" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131296540, $r3, $r2)"/>  
        <node method="MainActivity loadSection" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.MainActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;,&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void loadSection(int)&gt;,void loadSection(int)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.MainActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: boolean onItemClick(android.view.View,int,com.mikepenz.materialdrawer.model.interfaces.IDrawerItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.activity.MainActivity: void loadSection(int)&gt;"/>  
        <node method="MainActivity loadSection" type="getFragment" unit="$r1 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.MainActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="MainActivity loadSection" type="beginTransaction" unit="$r4 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MainActivity loadSection" type="replaceFunction" unit="$r4 = virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131296540, $r3, $r2)"/>  
        <node method="MainActivity loadSection" type="commit" unit="virtualinvoke $r4.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$2: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditEventActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$12"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$12: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$12: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity$12: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,void openColorPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="ColorChooserDialog$Builder show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog$Builder show" type="dialogShow" unit="virtualinvoke $r2.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r1)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;,&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker$2: void onBottomSheetItemClick(android.view.MenuItem)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void access$300(com.oriondev.moneywallet.picker.IconPicker)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: void openColorPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.Glide"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$5"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$5: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$5: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity$5: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.load.resource.gif.GifDrawable"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifDrawable"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifDrawable"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.load.resource.gif.GifDrawable"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifDrawable: void &lt;init&gt;(android.content.Context,com.bumptech.glide.gifdecoder.GifDecoder,com.bumptech.glide.load.Transformation,int,int,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.load.resource.gif.GifFrameLoader: void &lt;init&gt;(com.bumptech.glide.Glide,com.bumptech.glide.gifdecoder.GifDecoder,int,int,com.bumptech.glide.load.Transformation,android.graphics.Bitmap)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$6"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$6: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$6: void onClick(android.view.View)&gt;,&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;,void showDatePicker()"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <destinition name="com.philliphsu.bottomsheetpickers.date.DatePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity$6: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.DateTimePicker: void showDatePicker()&gt;"/>  
        <node method="DateTimePicker showDatePicker" type="getFragment" unit="$r4 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.DateTimePicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="DateTimePicker showDatePicker" type="dialogShow" unit="virtualinvoke $r3.&lt;com.philliphsu.bottomsheetpickers.date.DatePickerDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, $r5)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterPicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditEventActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditEventActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="RecurrencePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="RecurrencePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RecurrencePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="RecurrencePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterPicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="RecurrencePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="RecurrencePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RecurrencePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RecurrencePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="RecurrencePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.RecurrencePicker: com.oriondev.moneywallet.picker.RecurrencePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.RecurrenceSetting)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditRecurrentTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditSavingActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditSavingActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditCategoryActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;,com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onCreatePreferences(android.os.Bundle,java.lang.String)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: com.oriondev.moneywallet.picker.ColorPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,int,boolean,com.oriondev.moneywallet.picker.ColorPicker$Controller)&gt;"/>  
        <node method="ColorPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="ColorPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.base.MultiPanelFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MultiPanelActivity onCreate" type="getFragment" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="MultiPanelActivity onCreate" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MultiPanelActivity onCreate" type="replaceFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131296540, $r1, $r4)"/>  
        <node method="MultiPanelActivity onCreate" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="MultiPanelActivity onCreate" type="getFragment" unit="$r3 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.base.MultiPanelActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="MultiPanelActivity onCreate" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MultiPanelActivity onCreate" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransactionItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.model.VectorIcon"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.model.VectorIcon"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.model.VectorIcon"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.model.VectorIcon"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.model.VectorIcon"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.model.VectorIcon"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.model.VectorIcon"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.model.VectorIcon: boolean apply(android.widget.ImageView)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,android.app.Dialog onCreateDialog(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,android.app.Dialog onCreateDialog(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,android.app.Dialog onCreateDialog(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.OverviewSettingDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.BackupListActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="BackupListActivity onCreate" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="BackupListActivity onCreate" type="beginTransaction" unit="$r5 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="BackupListActivity onCreate" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="BackupListActivity onCreate" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="BackupListActivity onCreate" type="beginTransaction" unit="$r5 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="BackupListActivity onCreate" type="replaceFunction" unit="$r5 = virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)&gt;(2131296540, $r3, &quot;BackupListActivity::tag::BackupMultiPanelFragment&quot;)"/>  
        <node method="BackupListActivity onCreate" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;,&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(android.support.v7.widget.RecyclerView$ViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter: void onBindViewHolder(com.oriondev.moneywallet.ui.adapter.recycler.CurrencyCursorAdapter$CurrencyViewHolder,android.database.Cursor)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionModelActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.BackupListActivity$2"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity$2: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity$2: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.BackupListActivity"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.GenericProgressDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity$2: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BackupListActivity$2 onReceive" type="getFragment" unit="$r9 = virtualinvoke $r4.&lt;com.oriondev.moneywallet.ui.activity.BackupListActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()&gt;()"/>  
        <node method="BackupListActivity$2 onReceive" type="dialogShow" unit="virtualinvoke $r5.&lt;com.oriondev.moneywallet.ui.fragment.dialog.GenericProgressDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r9, &quot;BackupListActivity::tag::GenericProgressDialog&quot;)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;,void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCreatePanelView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)&gt;"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: android.app.Fragment findFragment(android.view.View,android.app.Activity)&gt;, &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,com.bumptech.glide.RequestManager get(android.view.View), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="RequestManagerRetriever get" type="ReceiveFromRetValue" unit="$r4 = virtualinvoke $r1.&lt;android.app.Activity: android.app.FragmentManager getFragmentManager()&gt;()"/>  
        <node method="Activity getFragmentManager" type="CreateMethod" unit="retFragMan = new android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager supportFragmentGet(android.content.Context,android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever supportFragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;,&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void onShowItemId(long)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.TransferItemFragment: void setLoadingScreen(boolean)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void setAttachments(java.util.List)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.view.AttachmentView: void addAttachment(int,com.oriondev.moneywallet.model.Attachment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.view.View)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.picker.IconPicker"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;,com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;"/>  
      <source name="com.oriondev.moneywallet.picker.IconPicker"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="BudgetTypePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="BudgetTypePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="BudgetTypePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="BudgetTypePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="BudgetTypePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.BudgetTypePicker: com.oriondev.moneywallet.picker.BudgetTypePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.storage.database.Contract$BudgetType)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet[])&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditBudgetActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,android.app.Dialog onCreateDialog(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;,android.app.Dialog onCreateDialog(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.dialog.RecurrencePickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.Glide"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCurrencyChanged(java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCurrencyChanged(java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;,&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.CurrencyConverterActivity: void onCurrencyChanged(java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;"/>  
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$5: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,boolean onPreferenceClick(android.support.v7.preference.Preference)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.oriondev.moneywallet.ui.fragment.dialog.CustomDigitSetupDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$5: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="UserInterfaceSettingFragment$5 onPreferenceClick" type="getFragment" unit="$r4 = virtualinvoke $r2.&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="UserInterfaceSettingFragment$5 onPreferenceClick" type="dialogShow" unit="virtualinvoke $r3.&lt;com.oriondev.moneywallet.ui.fragment.dialog.CustomDigitSetupDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r4, &quot;UserInterfaceSettingFragment::Tag::CustomDigit::DialogFragment&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;,com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,void showPicker(), &lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <destinition name="com.afollestad.materialdialogs.color.ColorChooserDialog"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$2: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="ColorPicker showPicker" type="getFragment" unit="$r2 = virtualinvoke r0.&lt;com.oriondev.moneywallet.picker.ColorPicker: android.support.v4.app.FragmentManager getChildFragmentManager()&gt;()"/>  
        <node method="ColorPicker showPicker" type="dialogShow" unit="virtualinvoke $r1.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: com.afollestad.materialdialogs.color.ColorChooserDialog show(android.support.v4.app.FragmentManager)&gt;($r2)"/>  
        <node method="ColorChooserDialog show" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog show" type="dialogShow" unit="virtualinvoke r0.&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void show(android.support.v4.app.FragmentManager,java.lang.String)&gt;($r1, &quot;[MD_COLOR_CHOOSER]&quot;)"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;,&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;,&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;,&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;,void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)"/>  
      <source name="com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment: void onViewCreated(android.view.View,android.os.Bundle)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.ui.fragment.secondary.UserInterfaceSettingFragment$1: boolean onPreferenceClick(android.support.v7.preference.Preference)&gt;"/>  
        <node method="&lt;com.oriondev.moneywallet.picker.ColorPicker: void showPicker()&gt;"/>  
        <node method="&lt;com.afollestad.materialdialogs.color.ColorChooserDialog: void dismissIfNecessary(android.support.v4.app.FragmentManager,java.lang.String)&gt;"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="beginTransaction" unit="$r5 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="ColorChooserDialog dismissIfNecessary" type="commit" unit="virtualinvoke $r5.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.bumptech.glide.Glide"> 
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;,com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean), &lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.RequestManagerFragment getRequestManagerFragment(android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager fragmentGet(android.content.Context,android.app.FragmentManager,android.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever fragmentGet" type="ReceiveFromParatMethod" unit="$r2 := @parameter1: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;"/>  
      <methodtrace value="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;,&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;,com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)"/>  
      <source name="com.bumptech.glide.Glide"/>  
      <nodes> 
        <node method="&lt;com.bumptech.glide.Glide: com.bumptech.glide.RequestManager 'with'(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)&gt;"/>  
        <node method="&lt;com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.manager.SupportRequestManagerFragment getSupportRequestManagerFragment(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,boolean)&gt;"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="beginTransaction" unit="$r8 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="addFunction" unit="$r8 = virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, &quot;com.bumptech.glide.manager&quot;)"/>  
        <node method="RequestManagerRetriever getSupportRequestManagerFragment" type="commit" unit="virtualinvoke $r8.&lt;android.support.v4.app.FragmentTransaction: int commitAllowingStateLoss()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="AttachmentPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="AttachmentPicker createPicker" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="AttachmentPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="AttachmentPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="AttachmentPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CategoryPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CategoryPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CategoryPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PersonPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.CategoryPicker: com.oriondev.moneywallet.picker.CategoryPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Category)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransactionActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.CurrencyPicker: com.oriondev.moneywallet.picker.CurrencyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditWalletActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditWalletActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="CurrencyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="AttachmentPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="AttachmentPicker createPicker" type="ReceiveFromParatMethod" unit="$r2 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="AttachmentPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r2.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="AttachmentPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="AttachmentPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="CurrencyConverterPicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="CurrencyConverterPicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r6, $r0)"/>  
        <node method="CurrencyConverterPicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="EventPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="EventPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="EventPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PersonPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.CurrencyConverterPicker: com.oriondev.moneywallet.picker.CurrencyConverterPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,com.oriondev.moneywallet.model.CurrencyUnit,double)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.EventPicker: com.oriondev.moneywallet.picker.EventPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Event)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;, &lt;com.oriondev.moneywallet.picker.AttachmentPicker: com.oriondev.moneywallet.picker.AttachmentPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.ArrayList)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditTransferActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditTransferActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditPersonActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditPersonActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
  <Component source="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"> 
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="IconPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="IconPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="IconPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="DateTimePicker createPicker" type="beginTransaction" unit="$r7 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="DateTimePicker createPicker" type="addFunction" unit="$r7 = virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="DateTimePicker createPicker" type="commit" unit="virtualinvoke $r7.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PlacePicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PlacePicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PlacePicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="ReceiveFromParatMethod" unit="$r1 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="MoneyPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r1.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="MoneyPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r4, $r0)"/>  
        <node method="MoneyPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="WalletPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="WalletPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="WalletPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary>  
    <FragmentSummary> 
      <method value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;,void onViewCreated(android.os.Bundle), &lt;com.oriondev.moneywallet.picker.IconPicker: com.oriondev.moneywallet.picker.IconPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Icon)&gt;, &lt;com.oriondev.moneywallet.picker.MoneyPicker: com.oriondev.moneywallet.picker.MoneyPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.CurrencyUnit,long)&gt;, &lt;com.oriondev.moneywallet.picker.DateTimePicker: com.oriondev.moneywallet.picker.DateTimePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,java.util.Date)&gt;, &lt;com.oriondev.moneywallet.picker.WalletPicker: com.oriondev.moneywallet.picker.WalletPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Wallet)&gt;, &lt;com.oriondev.moneywallet.picker.PersonPicker: com.oriondev.moneywallet.picker.PersonPicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Person[])&gt;, &lt;com.oriondev.moneywallet.picker.PlacePicker: com.oriondev.moneywallet.picker.PlacePicker createPicker(android.support.v4.app.FragmentManager,java.lang.String,com.oriondev.moneywallet.model.Place)&gt;"/>  
      <source name="com.oriondev.moneywallet.ui.activity.NewEditDebtActivity"/>  
      <nodes> 
        <node method="&lt;com.oriondev.moneywallet.ui.activity.NewEditDebtActivity: void onViewCreated(android.os.Bundle)&gt;"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="ReceiveFromParatMethod" unit="$r3 := @parameter0: android.support.v4.app.FragmentManager"/>  
        <node method="PersonPicker createPicker" type="beginTransaction" unit="$r6 = virtualinvoke $r3.&lt;android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()&gt;()"/>  
        <node method="PersonPicker createPicker" type="addFunction" unit="$r6 = virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String)&gt;($r5, $r0)"/>  
        <node method="PersonPicker createPicker" type="commit" unit="virtualinvoke $r6.&lt;android.support.v4.app.FragmentTransaction: int commit()&gt;()"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
</root>
